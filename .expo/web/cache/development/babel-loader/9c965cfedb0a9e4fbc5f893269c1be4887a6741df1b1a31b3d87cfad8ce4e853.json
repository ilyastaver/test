{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport CreateSvg from \"../assets/icons/createSvg\";\nimport useStyles from \"./styles/mainAuthScreen.module\";\nimport { useFocusEffect } from '@react-navigation/native';\nimport HeaderButton from \"../components/buttons/headerButton\";\nimport MessageBody from \"../components/messageBody/messageBody\";\nimport AuthContext from \"../context/AuthContext\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ChannelUnauthScreen(_ref) {\n  var navigation = _ref.navigation,\n    route = _ref.route;\n  var styles = useStyles();\n  var channelId = route.params.channelId;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    shouldUseFocusEffect = _useState2[0],\n    setShouldUseFocusEffect = _useState2[1];\n  useEffect(function () {\n    setShouldUseFocusEffect(false);\n  }, [channelData.messages]);\n  useFocusEffect(React.useCallback(function () {\n    fetchChannelData();\n  }, [channelData.messages]));\n  var username = 'admin';\n  var password = 'root';\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    channelData = _useState4[0],\n    setChannelData = _useState4[1];\n  var scrollViewRef = useRef(null);\n  var _useState5 = useState(true),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isAtBottom = _useState6[0],\n    setIsAtBottom = _useState6[1];\n  useEffect(function () {\n    var _channelData$messages;\n    if ((channelData == null ? void 0 : (_channelData$messages = channelData.messages) == null ? void 0 : _channelData$messages.length) > 0 && isAtBottom) {\n      scrollViewRef.current.scrollToEnd({\n        animated: true\n      });\n    }\n  }, [channelData == null ? void 0 : channelData.messages, isAtBottom]);\n  var handleContentSizeChange = function handleContentSizeChange() {\n    var isScrolledToBottom = scrollViewRef.current && scrollViewRef.current.contentOffset && scrollViewRef.current.contentOffset.y + scrollViewRef.current.layoutMeasurement.height >= scrollViewRef.current.contentSize.height;\n    setIsAtBottom(isScrolledToBottom);\n  };\n  var fetchChannelData = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var response = yield fetch(\"http://localhost:8080/api/channels/\" + channelId, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': \"Basic \" + btoa(username + \":\" + password)\n          }\n        });\n        if (response.ok) {\n          var _user, _channelData$creator, _user$channels;\n          var _channelData = yield response.json();\n          var isCreator = ((_user = user) == null ? void 0 : _user.id) === ((_channelData$creator = _channelData.creator) == null ? void 0 : _channelData$creator.id);\n          var member = (_user$channels = user.channels) == null ? void 0 : _user$channels.some(function (channel) {\n            return channel.id === _channelData.id;\n          });\n          var currentUser = _channelData.members.find(function (member) {\n            return member.user.id === user.id;\n          });\n          if (currentUser) {\n            var role = currentUser.role;\n            if (role) {\n              if (role.isAdmin !== undefined) {\n                setIsAdmin(role.isAdmin);\n              }\n            }\n          }\n          setIsMember(member);\n          setIsDisable(isCreator);\n          setChannelData(_channelData);\n        } else {\n          console.log('Failed to fetch channel data');\n        }\n      } catch (error) {\n        console.log('Error fetching channel data:', error);\n      }\n    });\n    return function fetchChannelData() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.containerMain,\n    children: [_jsxs(View, {\n      style: styles.barChanContainer,\n      children: [_jsx(Text, {\n        style: styles.barText,\n        children: \"Channels name\"\n      }), _jsx(View, {\n        children: _jsx(HeaderButton, {\n          title: 'Присоединиться',\n          onPress: function onPress() {\n            return navigation.navigate('Auth');\n          }\n        })\n      })]\n    }), _jsx(View, {\n      style: styles.historyContainer,\n      children: _jsx(ScrollView, {\n        ref: scrollViewRef,\n        onContentSizeChange: handleContentSizeChange,\n        style: {\n          flex: 1,\n          scrollbarWidth: 0,\n          flexDirection: 'column'\n        },\n        children: messageBodies.map(function (data, index) {\n          return _jsx(MessageBody, {\n            data: data\n          }, index);\n        })\n      })\n    }), _jsx(View, {\n      style: styles.bottomLeft,\n      children: _jsx(TouchableHighlight, {\n        onPress: function onPress() {\n          return navigation.navigate('Auth');\n        },\n        children: _jsx(CreateSvg, {})\n      })\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","useEffect","View","Text","TouchableHighlight","Modal","TouchableOpacity","ScrollView","TextInput","CreateSvg","useStyles","useFocusEffect","HeaderButton","MessageBody","AuthContext","jsx","_jsx","jsxs","_jsxs","ChannelUnauthScreen","_ref","navigation","route","styles","channelId","params","_useState","_useState2","_slicedToArray","shouldUseFocusEffect","setShouldUseFocusEffect","channelData","messages","useCallback","fetchChannelData","username","password","_useState3","_useState4","setChannelData","scrollViewRef","useRef","_useState5","_useState6","isAtBottom","setIsAtBottom","_channelData$messages","length","current","scrollToEnd","animated","handleContentSizeChange","isScrolledToBottom","contentOffset","y","layoutMeasurement","height","contentSize","_ref2","_asyncToGenerator","response","fetch","method","headers","btoa","ok","_user","_channelData$creator","_user$channels","json","isCreator","user","id","creator","member","channels","some","channel","currentUser","members","find","role","isAdmin","undefined","setIsAdmin","setIsMember","setIsDisable","console","log","error","apply","arguments","style","containerMain","children","barChanContainer","barText","title","onPress","navigate","historyContainer","ref","onContentSizeChange","flex","scrollbarWidth","flexDirection","messageBodies","map","data","index","bottomLeft"],"sources":["C:/Users/ilias/OneDrive/Рабочий стол/messenger_project/Application/Client/screens/ChannelUnauthScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { View, Text, TouchableHighlight, Modal, TouchableOpacity, ScrollView, TextInput } from 'react-native-web';\r\nimport CreateSvg from '../assets/icons/createSvg';\r\nimport useStyles from './styles/mainAuthScreen.module';\r\nimport { useFocusEffect } from '@react-navigation/native';\r\nimport HeaderButton from '../components/buttons/headerButton';\r\n\r\nimport MessageBody from '../components/messageBody/messageBody';\r\nimport AuthContext from '../context/AuthContext';\r\n\r\n\r\nexport default function ChannelUnauthScreen({ navigation, route }) {\r\n    const styles = useStyles();\r\n    const { channelId } = route.params;\r\n    const [shouldUseFocusEffect, setShouldUseFocusEffect] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setShouldUseFocusEffect(false); // Reset the flag\r\n    }, [channelData.messages]);\r\n    useFocusEffect(\r\n        React.useCallback(() => {\r\n            fetchChannelData();\r\n        }, [channelData.messages])\r\n    );\r\n    const username = 'admin';\r\n    const password = 'root';\r\n    const [channelData, setChannelData] = useState([]);\r\n\r\n    const scrollViewRef = useRef(null);\r\n    const [isAtBottom, setIsAtBottom] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (channelData?.messages?.length > 0 && isAtBottom) {\r\n            scrollViewRef.current.scrollToEnd({ animated: true });\r\n        }\r\n    }, [channelData?.messages, isAtBottom]);\r\n\r\n    const handleContentSizeChange = () => {\r\n        const isScrolledToBottom =\r\n            scrollViewRef.current &&\r\n            scrollViewRef.current.contentOffset &&\r\n            scrollViewRef.current.contentOffset.y + scrollViewRef.current.layoutMeasurement.height >=\r\n            scrollViewRef.current.contentSize.height;\r\n\r\n        setIsAtBottom(isScrolledToBottom);\r\n    };\r\n\r\n    const fetchChannelData = async () => {\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/api/channels/${channelId}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Basic ${btoa(`${username}:${password}`)}`,\r\n                },\r\n            });\r\n\r\n            if (response.ok) {\r\n                const channelData = await response.json();\r\n\r\n                // Check if the user is the channel creator\r\n                const isCreator = user?.id === channelData.creator?.id;\r\n                const member = user.channels?.some((channel) => channel.id === channelData.id);\r\n                const currentUser = channelData.members.find(member => member.user.id === user.id);\r\n\r\n                if (currentUser) {\r\n                    // Access the role object of the current user\r\n                    const { role } = currentUser;\r\n\r\n                    if (role) {\r\n                        // User has a role, handle it accordingly\r\n\r\n\r\n                        if (role.isAdmin !== undefined) {\r\n                            // User has an isAdmin property\r\n\r\n                            setIsAdmin(role.isAdmin);\r\n                        }\r\n                    }\r\n                } \r\n                // Update isMember and showSettings based on the condition\r\n                setIsMember(member);\r\n\r\n                setIsDisable(isCreator);\r\n                setChannelData(channelData);\r\n            } else {\r\n                // Handle error response\r\n                console.log('Failed to fetch channel data');\r\n            }\r\n        } catch (error) {\r\n            console.log('Error fetching channel data:', error);\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <View style={styles.containerMain}>\r\n            <View style={styles.barChanContainer}>\r\n                <Text style={styles.barText}>Channels name</Text>\r\n                <View>\r\n                    <HeaderButton title={'Присоединиться'} onPress={() => navigation.navigate('Auth')} />\r\n                </View>\r\n            </View >\r\n            <View style={styles.historyContainer}>\r\n                <ScrollView ref={scrollViewRef} onContentSizeChange={handleContentSizeChange} style={{ flex: 1, scrollbarWidth: 0, flexDirection: 'column' }}>\r\n                {messageBodies.map((data, index) =>\r\n                        <MessageBody key={index} data={data} />\r\n                    )}\r\n                </ScrollView>\r\n\r\n            </View>\r\n            <View style = {styles.bottomLeft}>\r\n             <TouchableHighlight onPress={() => navigation.navigate('Auth')}>\r\n          <CreateSvg />\r\n        </TouchableHighlight>\r\n        </View>\r\n        </View>\r\n    );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}