{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { useState, useRef, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport useStyles from \"./styles/mainAuthScreen.module\";\nimport HeaderButton from \"../components/buttons/headerButton\";\nimport ChangeAvatar from \"../components/Avatar/ChangeAvatar/changeAvatar\";\nimport BackSvg from \"../assets/icons/backSvg\";\nimport CrossSvg from \"../assets/icons/crossSvg\";\nimport AddSvg from \"../assets/icons/addSvg\";\nimport NicknameInput from \"../components/inputs/nicknameInput/nicknameInput\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { ImageContext } from \"../context/ImageContext\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ProfileScreen(_ref) {\n  var navigation = _ref.navigation;\n  var styles = useStyles();\n  var _useState = useState({\n      nickname: ''\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    inputText = _useState2[0],\n    setInputText = _useState2[1];\n  var isFormValid = inputText.nickname;\n  var emailContainerRef = useRef(null);\n  var _useState3 = useState(36),\n    _useState4 = _slicedToArray(_useState3, 2),\n    emailFontSize = _useState4[0],\n    setEmailFontSize = _useState4[1];\n  var _useState5 = useState('ilia.stavier@mail.ru'),\n    _useState6 = _slicedToArray(_useState5, 2),\n    emailText = _useState6[0],\n    setEmailText = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    showInputField = _useState8[0],\n    setShowInputField = _useState8[1];\n  var _useState9 = useState(0),\n    _useState10 = _slicedToArray(_useState9, 2),\n    rotationDeg = _useState10[0],\n    setRotationDeg = _useState10[1];\n  useEffect(function () {\n    handleEmailLayout();\n    fetchSavedNickname();\n  }, []);\n  var handleEmailLayout = function handleEmailLayout() {\n    var emailContainerWidth = emailContainerRef.current.offsetWidth;\n    var desiredMaxWidth = 300;\n    var desiredMaxFontSize = 36;\n    var emailFontSize = Math.min(desiredMaxFontSize, desiredMaxWidth / emailContainerWidth * desiredMaxFontSize);\n    setEmailFontSize(emailFontSize);\n  };\n  var fetchSavedNickname = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var savedNickname = yield AsyncStorage.getItem('profile_nickname');\n        if (savedNickname) {\n          setInputText({\n            nickname: savedNickname\n          });\n        }\n      } catch (error) {\n        console.log('Error fetching saved nickname:', error);\n      }\n    });\n    return function fetchSavedNickname() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var handleAddSvgPress = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      if (showInputField) {\n        setShowInputField(false);\n        setRotationDeg(0);\n        try {\n          yield AsyncStorage.setItem('profile_nickname', inputText.nickname);\n        } catch (error) {\n          console.log('Error saving nickname:', error);\n        }\n      } else {\n        setShowInputField(true);\n        setRotationDeg(90);\n      }\n    });\n    return function handleAddSvgPress() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var addSvgStyle = {\n    transform: \"rotate(\" + (showInputField ? 45 : 0) + \"deg)\",\n    transition: 'transform 0.5s ease'\n  };\n  return _jsxs(View, {\n    style: styles.containerMain,\n    children: [_jsxs(View, {\n      style: styles.profileSettingsContainer,\n      children: [_jsx(View, {\n        style: {\n          marginBottom: 13\n        },\n        children: _jsx(ChangeAvatar, {})\n      }), _jsxs(View, {\n        style: styles.nicknameContainer,\n        children: [showInputField ? _jsx(NicknameInput, {\n          value: inputText.nickname,\n          setValue: function setValue(text) {\n            return setInputText(_objectSpread(_objectSpread({}, inputText), {}, {\n              nickname: text\n            }));\n          },\n          flex: false\n        }) : _jsx(Text, {\n          style: {\n            fontSize: 48,\n            fontFamily: 'Montserrat-Regular',\n            paddingHorizontal: 30\n          },\n          children: inputText.nickname\n        }), _jsx(TouchableOpacity, {\n          onPress: handleAddSvgPress,\n          children: _jsx(AddSvg, {\n            style: addSvgStyle\n          })\n        })]\n      }), _jsx(View, {\n        style: {\n          borderTopWidth: 1,\n          borderBottomWidth: 1,\n          borderColor: '#000000',\n          paddingHorizontal: 10,\n          paddingVertical: 15,\n          width: '80%',\n          overflow: 'hidden',\n          textOverflow: 'ellipsis',\n          whiteSpace: 'nowrap',\n          marginBottom: 13\n        },\n        children: _jsx(View, {\n          ref: emailContainerRef,\n          onLayout: handleEmailLayout,\n          children: _jsx(Text, {\n            style: {\n              color: '#000000',\n              fontSize: emailFontSize,\n              textAlign: 'center',\n              fontFamily: 'Montserrat-Regular',\n              marginBottom: 13\n            },\n            children: emailText\n          })\n        })\n      }), _jsx(View, {\n        children: _jsx(HeaderButton, {\n          title: 'Изменить почту',\n          onPress: function onPress() {\n            return navigation.navigate('ChangeEmail');\n          }\n        })\n      }), _jsx(View, {\n        style: {\n          marginBottom: 13\n        },\n        children: _jsx(HeaderButton, {\n          title: 'Изменить пароль',\n          onPress: function onPress() {\n            return navigation.navigate('ChangePassword');\n          }\n        })\n      })]\n    }), _jsx(View, {\n      style: styles.topLeft,\n      children: _jsx(TouchableHighlight, {\n        onPress: function onPress() {\n          return navigation.navigate('MainAuth');\n        },\n        children: _jsx(BackSvg, {})\n      })\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","useRef","useEffect","View","Text","TouchableHighlight","TouchableOpacity","useStyles","HeaderButton","ChangeAvatar","BackSvg","CrossSvg","AddSvg","NicknameInput","AsyncStorage","ImageContext","jsx","_jsx","jsxs","_jsxs","ProfileScreen","_ref","navigation","styles","_useState","nickname","_useState2","_slicedToArray","inputText","setInputText","isFormValid","emailContainerRef","_useState3","_useState4","emailFontSize","setEmailFontSize","_useState5","_useState6","emailText","setEmailText","_useState7","_useState8","showInputField","setShowInputField","_useState9","_useState10","rotationDeg","setRotationDeg","handleEmailLayout","fetchSavedNickname","emailContainerWidth","current","offsetWidth","desiredMaxWidth","desiredMaxFontSize","Math","min","_ref2","_asyncToGenerator","savedNickname","getItem","error","console","log","apply","arguments","handleAddSvgPress","_ref3","setItem","addSvgStyle","transform","transition","style","containerMain","children","profileSettingsContainer","marginBottom","nicknameContainer","value","setValue","text","_objectSpread","flex","fontSize","fontFamily","paddingHorizontal","onPress","borderTopWidth","borderBottomWidth","borderColor","paddingVertical","width","overflow","textOverflow","whiteSpace","ref","onLayout","color","textAlign","title","navigate","topLeft"],"sources":["C:/Users/ilias/OneDrive/Рабочий стол/messenger_project/Application/Client/screens/ProfileScreen.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { View, Text, TouchableHighlight, TouchableOpacity } from 'react-native';\r\nimport useStyles from './styles/mainAuthScreen.module';\r\nimport HeaderButton from '../components/buttons/headerButton';\r\nimport ChangeAvatar from '../components/Avatar/ChangeAvatar/changeAvatar';\r\nimport BackSvg from '../assets/icons/backSvg';\r\nimport CrossSvg from '../assets/icons/crossSvg';\r\nimport AddSvg from '../assets/icons/addSvg';\r\nimport NicknameInput from '../components/inputs/nicknameInput/nicknameInput';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { ImageContext } from '../context/ImageContext';\r\n\r\nexport default function ProfileScreen({ navigation }) {\r\n  const styles = useStyles();\r\n  \r\n  const [inputText, setInputText] = useState({\r\n    nickname: '', // Use an empty string as the initial value\r\n  });\r\n  const isFormValid = inputText.nickname;\r\n\r\n  const emailContainerRef = useRef(null);\r\n  const [emailFontSize, setEmailFontSize] = useState(36);\r\n  const [emailText, setEmailText] = useState('ilia.stavier@mail.ru');\r\n\r\n  const [showInputField, setShowInputField] = useState(false); // Track the visibility of the input field\r\n  const [rotationDeg, setRotationDeg] = useState(0);\r\n\r\n  useEffect(() => {\r\n    handleEmailLayout();\r\n    fetchSavedNickname();\r\n  }, []);\r\n\r\n  const handleEmailLayout = () => {\r\n    const emailContainerWidth = emailContainerRef.current.offsetWidth;\r\n    const desiredMaxWidth = 300; // You can adjust this as needed\r\n    const desiredMaxFontSize = 36; // You can adjust this as needed\r\n    const emailFontSize = Math.min(desiredMaxFontSize, (desiredMaxWidth / emailContainerWidth) * desiredMaxFontSize);\r\n    setEmailFontSize(emailFontSize);\r\n  };\r\n\r\n  const fetchSavedNickname = async () => {\r\n    try {\r\n      const savedNickname = await AsyncStorage.getItem('profile_nickname');\r\n      if (savedNickname) {\r\n        setInputText({ nickname: savedNickname });\r\n      }\r\n    } catch (error) {\r\n      console.log('Error fetching saved nickname:', error);\r\n    }\r\n  };\r\n\r\n  const handleAddSvgPress = async () => {\r\n    if (showInputField) {\r\n      // Save changes and hide the input field\r\n      setShowInputField(false);\r\n      setRotationDeg(0); // Reset the rotation to 0 degrees\r\n      try {\r\n        await AsyncStorage.setItem('profile_nickname', inputText.nickname);\r\n      } catch (error) {\r\n        console.log('Error saving nickname:', error);\r\n      }\r\n    } else {\r\n      // Show the input field and rotate the AddSvg icon\r\n      setShowInputField(true);\r\n      setRotationDeg(90); // Rotate by 90 degrees\r\n    }\r\n  };\r\n\r\n  // CSS style to apply the rotation transformation to the AddSvg icon\r\n  const addSvgStyle = {\r\n    transform: `rotate(${showInputField ? 45 : 0}deg)`,\r\n    transition: 'transform 0.5s ease', // Smooth transition for rotation animation\r\n  };\r\n\r\n  return (\r\n    <View style={styles.containerMain}>\r\n      <View style={styles.profileSettingsContainer}>\r\n        <View style={{ marginBottom: 13 }}>\r\n          <ChangeAvatar />\r\n        </View>\r\n        <View style={styles.nicknameContainer}>\r\n          {showInputField ? (\r\n            <NicknameInput\r\n              value={inputText.nickname}\r\n              setValue={(text) => setInputText({ ...inputText, nickname: text })}\r\n              flex={false}\r\n            />\r\n          ) : (\r\n            <Text style={{ fontSize: 48, fontFamily: 'Montserrat-Regular', paddingHorizontal: 30 }}>\r\n              {inputText.nickname}\r\n            </Text>\r\n          )}\r\n          <TouchableOpacity onPress={handleAddSvgPress}>\r\n            <AddSvg style={addSvgStyle} />\r\n          </TouchableOpacity>\r\n        </View>\r\n        <View\r\n          style={{\r\n            borderTopWidth: 1,\r\n            borderBottomWidth: 1,\r\n            borderColor: '#000000',\r\n            paddingHorizontal: 10,\r\n            paddingVertical: 15,\r\n            width: '80%',\r\n            overflow: 'hidden',\r\n            textOverflow: 'ellipsis',\r\n            whiteSpace: 'nowrap',\r\n            marginBottom: 13,\r\n          }}\r\n        >\r\n          <View ref={emailContainerRef} onLayout={handleEmailLayout}>\r\n            <Text\r\n              style={{\r\n                color: '#000000',\r\n                fontSize: emailFontSize,\r\n                textAlign: 'center',\r\n                fontFamily: 'Montserrat-Regular',\r\n                marginBottom: 13,\r\n              }}\r\n            >\r\n              {emailText}\r\n            </Text>\r\n          </View>\r\n        </View>\r\n        <View>\r\n          <HeaderButton title={'Изменить почту'} onPress={() => navigation.navigate('ChangeEmail')} />\r\n        </View>\r\n        <View style={{ marginBottom: 13 }}>\r\n          <HeaderButton title={'Изменить пароль'} onPress={() => navigation.navigate('ChangePassword')} />\r\n        </View>\r\n      </View>\r\n      <View style={styles.topLeft}>\r\n        <TouchableHighlight onPress={() => navigation.navigate('MainAuth')}>\r\n          <BackSvg />\r\n        </TouchableHighlight>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n"],"mappings":";;;;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,kBAAA;AAAA,OAAAC,gBAAA;AAE3D,OAAOC,SAAS;AAChB,OAAOC,YAAY;AACnB,OAAOC,YAAY;AACnB,OAAOC,OAAO;AACd,OAAOC,QAAQ;AACf,OAAOC,MAAM;AACb,OAAOC,aAAa;AACpB,OAAOC,YAAY,MAAM,2CAA2C;AACpE,SAASC,YAAY;AAAkC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEvD,eAAe,SAASC,aAAaA,CAAAC,IAAA,EAAiB;EAAA,IAAdC,UAAU,GAAAD,IAAA,CAAVC,UAAU;EAChD,IAAMC,MAAM,GAAGhB,SAAS,CAAC,CAAC;EAE1B,IAAAiB,SAAA,GAAkCxB,QAAQ,CAAC;MACzCyB,QAAQ,EAAE;IACZ,CAAC,CAAC;IAAAC,UAAA,GAAAC,cAAA,CAAAH,SAAA;IAFKI,SAAS,GAAAF,UAAA;IAAEG,YAAY,GAAAH,UAAA;EAG9B,IAAMI,WAAW,GAAGF,SAAS,CAACH,QAAQ;EAEtC,IAAMM,iBAAiB,GAAG9B,MAAM,CAAC,IAAI,CAAC;EACtC,IAAA+B,UAAA,GAA0ChC,QAAQ,CAAC,EAAE,CAAC;IAAAiC,UAAA,GAAAN,cAAA,CAAAK,UAAA;IAA/CE,aAAa,GAAAD,UAAA;IAAEE,gBAAgB,GAAAF,UAAA;EACtC,IAAAG,UAAA,GAAkCpC,QAAQ,CAAC,sBAAsB,CAAC;IAAAqC,UAAA,GAAAV,cAAA,CAAAS,UAAA;IAA3DE,SAAS,GAAAD,UAAA;IAAEE,YAAY,GAAAF,UAAA;EAE9B,IAAAG,UAAA,GAA4CxC,QAAQ,CAAC,KAAK,CAAC;IAAAyC,UAAA,GAAAd,cAAA,CAAAa,UAAA;IAApDE,cAAc,GAAAD,UAAA;IAAEE,iBAAiB,GAAAF,UAAA;EACxC,IAAAG,UAAA,GAAsC5C,QAAQ,CAAC,CAAC,CAAC;IAAA6C,WAAA,GAAAlB,cAAA,CAAAiB,UAAA;IAA1CE,WAAW,GAAAD,WAAA;IAAEE,cAAc,GAAAF,WAAA;EAElC3C,SAAS,CAAC,YAAM;IACd8C,iBAAiB,CAAC,CAAC;IACnBC,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMD,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAA,EAAS;IAC9B,IAAME,mBAAmB,GAAGnB,iBAAiB,CAACoB,OAAO,CAACC,WAAW;IACjE,IAAMC,eAAe,GAAG,GAAG;IAC3B,IAAMC,kBAAkB,GAAG,EAAE;IAC7B,IAAMpB,aAAa,GAAGqB,IAAI,CAACC,GAAG,CAACF,kBAAkB,EAAGD,eAAe,GAAGH,mBAAmB,GAAII,kBAAkB,CAAC;IAChHnB,gBAAgB,CAACD,aAAa,CAAC;EACjC,CAAC;EAED,IAAMe,kBAAkB;IAAA,IAAAQ,KAAA,GAAAC,iBAAA,CAAG,aAAY;MACrC,IAAI;QACF,IAAMC,aAAa,SAAS7C,YAAY,CAAC8C,OAAO,CAAC,kBAAkB,CAAC;QACpE,IAAID,aAAa,EAAE;UACjB9B,YAAY,CAAC;YAAEJ,QAAQ,EAAEkC;UAAc,CAAC,CAAC;QAC3C;MACF,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEF,KAAK,CAAC;MACtD;IACF,CAAC;IAAA,gBATKZ,kBAAkBA,CAAA;MAAA,OAAAQ,KAAA,CAAAO,KAAA,OAAAC,SAAA;IAAA;EAAA,GASvB;EAED,IAAMC,iBAAiB;IAAA,IAAAC,KAAA,GAAAT,iBAAA,CAAG,aAAY;MACpC,IAAIhB,cAAc,EAAE;QAElBC,iBAAiB,CAAC,KAAK,CAAC;QACxBI,cAAc,CAAC,CAAC,CAAC;QACjB,IAAI;UACF,MAAMjC,YAAY,CAACsD,OAAO,CAAC,kBAAkB,EAAExC,SAAS,CAACH,QAAQ,CAAC;QACpE,CAAC,CAAC,OAAOoC,KAAK,EAAE;UACdC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEF,KAAK,CAAC;QAC9C;MACF,CAAC,MAAM;QAELlB,iBAAiB,CAAC,IAAI,CAAC;QACvBI,cAAc,CAAC,EAAE,CAAC;MACpB;IACF,CAAC;IAAA,gBAfKmB,iBAAiBA,CAAA;MAAA,OAAAC,KAAA,CAAAH,KAAA,OAAAC,SAAA;IAAA;EAAA,GAetB;EAGD,IAAMI,WAAW,GAAG;IAClBC,SAAS,eAAY5B,cAAc,GAAG,EAAE,GAAG,CAAC,UAAM;IAClD6B,UAAU,EAAE;EACd,CAAC;EAED,OACEpD,KAAA,CAAChB,IAAI;IAACqE,KAAK,EAAEjD,MAAM,CAACkD,aAAc;IAAAC,QAAA,GAChCvD,KAAA,CAAChB,IAAI;MAACqE,KAAK,EAAEjD,MAAM,CAACoD,wBAAyB;MAAAD,QAAA,GAC3CzD,IAAA,CAACd,IAAI;QAACqE,KAAK,EAAE;UAAEI,YAAY,EAAE;QAAG,CAAE;QAAAF,QAAA,EAChCzD,IAAA,CAACR,YAAY,IAAE;MAAC,CACZ,CAAC,EACPU,KAAA,CAAChB,IAAI;QAACqE,KAAK,EAAEjD,MAAM,CAACsD,iBAAkB;QAAAH,QAAA,GACnChC,cAAc,GACbzB,IAAA,CAACJ,aAAa;UACZiE,KAAK,EAAElD,SAAS,CAACH,QAAS;UAC1BsD,QAAQ,EAAE,SAAAA,SAACC,IAAI;YAAA,OAAKnD,YAAY,CAAAoD,aAAA,CAAAA,aAAA,KAAMrD,SAAS;cAAEH,QAAQ,EAAEuD;YAAI,EAAE,CAAC;UAAA,CAAC;UACnEE,IAAI,EAAE;QAAM,CACb,CAAC,GAEFjE,IAAA,CAACb,IAAI;UAACoE,KAAK,EAAE;YAAEW,QAAQ,EAAE,EAAE;YAAEC,UAAU,EAAE,oBAAoB;YAAEC,iBAAiB,EAAE;UAAG,CAAE;UAAAX,QAAA,EACpF9C,SAAS,CAACH;QAAQ,CACf,CACP,EACDR,IAAA,CAACX,gBAAgB;UAACgF,OAAO,EAAEpB,iBAAkB;UAAAQ,QAAA,EAC3CzD,IAAA,CAACL,MAAM;YAAC4D,KAAK,EAAEH;UAAY,CAAE;QAAC,CACd,CAAC;MAAA,CACf,CAAC,EACPpD,IAAA,CAACd,IAAI;QACHqE,KAAK,EAAE;UACLe,cAAc,EAAE,CAAC;UACjBC,iBAAiB,EAAE,CAAC;UACpBC,WAAW,EAAE,SAAS;UACtBJ,iBAAiB,EAAE,EAAE;UACrBK,eAAe,EAAE,EAAE;UACnBC,KAAK,EAAE,KAAK;UACZC,QAAQ,EAAE,QAAQ;UAClBC,YAAY,EAAE,UAAU;UACxBC,UAAU,EAAE,QAAQ;UACpBlB,YAAY,EAAE;QAChB,CAAE;QAAAF,QAAA,EAEFzD,IAAA,CAACd,IAAI;UAAC4F,GAAG,EAAEhE,iBAAkB;UAACiE,QAAQ,EAAEhD,iBAAkB;UAAA0B,QAAA,EACxDzD,IAAA,CAACb,IAAI;YACHoE,KAAK,EAAE;cACLyB,KAAK,EAAE,SAAS;cAChBd,QAAQ,EAAEjD,aAAa;cACvBgE,SAAS,EAAE,QAAQ;cACnBd,UAAU,EAAE,oBAAoB;cAChCR,YAAY,EAAE;YAChB,CAAE;YAAAF,QAAA,EAEDpC;UAAS,CACN;QAAC,CACH;MAAC,CACH,CAAC,EACPrB,IAAA,CAACd,IAAI;QAAAuE,QAAA,EACHzD,IAAA,CAACT,YAAY;UAAC2F,KAAK,EAAE,gBAAiB;UAACb,OAAO,EAAE,SAAAA,QAAA;YAAA,OAAMhE,UAAU,CAAC8E,QAAQ,CAAC,aAAa,CAAC;UAAA;QAAC,CAAE;MAAC,CACxF,CAAC,EACPnF,IAAA,CAACd,IAAI;QAACqE,KAAK,EAAE;UAAEI,YAAY,EAAE;QAAG,CAAE;QAAAF,QAAA,EAChCzD,IAAA,CAACT,YAAY;UAAC2F,KAAK,EAAE,iBAAkB;UAACb,OAAO,EAAE,SAAAA,QAAA;YAAA,OAAMhE,UAAU,CAAC8E,QAAQ,CAAC,gBAAgB,CAAC;UAAA;QAAC,CAAE;MAAC,CAC5F,CAAC;IAAA,CACH,CAAC,EACPnF,IAAA,CAACd,IAAI;MAACqE,KAAK,EAAEjD,MAAM,CAAC8E,OAAQ;MAAA3B,QAAA,EAC1BzD,IAAA,CAACZ,kBAAkB;QAACiF,OAAO,EAAE,SAAAA,QAAA;UAAA,OAAMhE,UAAU,CAAC8E,QAAQ,CAAC,UAAU,CAAC;QAAA,CAAC;QAAA1B,QAAA,EACjEzD,IAAA,CAACP,OAAO,IAAE;MAAC,CACO;IAAC,CACjB,CAAC;EAAA,CACH,CAAC;AAEX"},"metadata":{},"sourceType":"module","externalDependencies":[]}