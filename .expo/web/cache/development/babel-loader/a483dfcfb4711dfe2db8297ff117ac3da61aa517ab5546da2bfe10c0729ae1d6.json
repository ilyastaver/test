{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport useStyles from \"./messageInput.module\";\nimport SendSvg from \"../../../assets/icons/sendSvg\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar MessageInput = function MessageInput(_ref) {\n  var curuser = _ref.curuser,\n    chanInf = _ref.chanInf,\n    channel = _ref.channel,\n    onMessageSent = _ref.onMessageSent;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    message = _useState2[0],\n    setMessage = _useState2[1];\n  var _useWindowDimensions = useWindowDimensions(),\n    width = _useWindowDimensions.width,\n    height = _useWindowDimensions.height;\n  var styles = useStyles();\n  var username = 'admin';\n  var password = 'root';\n  var handleSend = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      if (message) {\n        try {\n          if (channel) {\n            var requestBody = {\n              currentUsername: curuser,\n              message: message,\n              channelName: chanInf.name\n            };\n            var response = yield fetch('https://messengerproject-production.up.railway.app/api/channels/add_message', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                'Authorization': \"Basic \" + btoa(username + \":\" + password)\n              },\n              body: JSON.stringify(requestBody)\n            });\n            if (response.ok) {\n              console.log('Message sent successfully');\n              setMessage('');\n              onMessageSent();\n            } else {\n              console.log('Failed to send message');\n            }\n          } else {\n            var _requestBody = {\n              currentUsername: curuser,\n              otherUsername: chanInf,\n              message: message\n            };\n            var _response = yield fetch('https://messengerproject-production.up.railway.app/api/chats/add_message', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                'Authorization': \"Basic \" + btoa(username + \":\" + password)\n              },\n              body: JSON.stringify(_requestBody)\n            });\n            if (_response.ok) {\n              console.log('Message sent successfully');\n              setMessage('');\n              onMessageSent();\n            } else {\n              console.log('Failed to send message');\n            }\n          }\n        } catch (error) {\n          console.error('Error sending message:', error);\n        }\n      }\n    });\n    return function handleSend() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Type your message here...\",\n      value: message,\n      onChangeText: setMessage\n    }), _jsx(TouchableOpacity, {\n      style: styles.sendButton,\n      onPress: handleSend,\n      children: _jsx(SendSvg, {})\n    })]\n  });\n};\nexport default MessageInput;","map":{"version":3,"names":["React","useState","View","StyleSheet","TouchableOpacity","TextInput","useWindowDimensions","useStyles","SendSvg","jsx","_jsx","jsxs","_jsxs","MessageInput","_ref","curuser","chanInf","channel","onMessageSent","_useState","_useState2","_slicedToArray","message","setMessage","_useWindowDimensions","width","height","styles","username","password","handleSend","_ref2","_asyncToGenerator","requestBody","currentUsername","channelName","name","response","fetch","method","headers","btoa","body","JSON","stringify","ok","console","log","otherUsername","error","apply","arguments","style","container","children","input","placeholder","value","onChangeText","sendButton","onPress"],"sources":["C:/Users/ilias/OneDrive/Рабочий стол/messenger_project/Application/Client/components/inputs/messageInput/messageInput.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, StyleSheet, TouchableOpacity, TextInput } from 'react-native-web';\r\nimport { useWindowDimensions } from 'react-native-web';\r\nimport useStyles from './messageInput.module';\r\nimport SendSvg from '../../../assets/icons/sendSvg';\r\n\r\nconst MessageInput = ({ curuser, chanInf, channel, onMessageSent }) => {\r\n  const [message, setMessage] = useState('');\r\n  const { width, height } = useWindowDimensions();\r\n  const styles = useStyles();\r\n  const username = 'admin';\r\n  const password = 'root';\r\n  const handleSend = async () => {\r\n    if (message) {\r\n      try {\r\n        if (channel) {\r\n          // Use existing API endpoint for channel messages\r\n          const requestBody = {\r\n            currentUsername: curuser,\r\n            message: message,\r\n            channelName: chanInf.name,\r\n          };\r\n    \r\n          const response = await fetch('https://messengerproject-production.up.railway.app/api/channels/add_message', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Basic ${btoa(`${username}:${password}`)}`,\r\n            },\r\n            body: JSON.stringify(requestBody),\r\n          });\r\n    \r\n          if (response.ok) {\r\n            console.log('Message sent successfully');\r\n            setMessage('');\r\n            onMessageSent(); // Invoke the callback to trigger chat data fetching\r\n          } else {\r\n            console.log('Failed to send message');\r\n          }\r\n        } else {\r\n          // Use custom API endpoint for direct messages\r\n          const requestBody = {\r\n            currentUsername: curuser,\r\n            otherUsername: chanInf,\r\n            message: message,\r\n          };\r\n    \r\n          const response = await fetch('https://messengerproject-production.up.railway.app/api/chats/add_message', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Basic ${btoa(`${username}:${password}`)}`,\r\n            },\r\n            body: JSON.stringify(requestBody),\r\n          });\r\n    \r\n          if (response.ok) {\r\n            console.log('Message sent successfully');\r\n            setMessage('');\r\n            onMessageSent(); // Invoke the callback to trigger chat data fetching\r\n          } else {\r\n            console.log('Failed to send message');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error sending message:', error);\r\n      }\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <View style={styles.container}>\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Type your message here...\"\r\n        value={message}\r\n        onChangeText={setMessage}\r\n      />\r\n      <TouchableOpacity style={styles.sendButton} onPress={handleSend}>\r\n        <SendSvg />\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default MessageInput;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}