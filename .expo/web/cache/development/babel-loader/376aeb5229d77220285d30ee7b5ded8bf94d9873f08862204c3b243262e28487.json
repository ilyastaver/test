{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/objectDestructuringEmpty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport CreateSvg from \"../assets/icons/createSvg\";\nimport useStyles from \"./styles/mainAuthScreen.module\";\nimport SearchInput from \"../components/inputs/searchInput/searchInput\";\nimport HeaderButton from \"../components/buttons/headerButton\";\nimport DataInput from \"../components/inputs/textInput/textInput\";\nimport SearchBody from \"../components/searchBodies/searchBody\";\nimport ShowAvatar from \"../components/Avatar/ShowAvatar/showAvatar\";\nimport BorderButton from \"../components/buttons/borderButton\";\nimport ForwardMessage from \"../components/forwardMessage/forwardMessage\";\nimport MessageBody from \"../components/messageBody/messageBody\";\nimport MessageInput from \"../components/inputs/messageInput/messageInput\";\nimport SettingsSvg from \"../assets/icons/settingsSvg\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ChannelScreen(_ref) {\n  var navigation = _ref.navigation;\n  var styles = useStyles();\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    showPopup = _useState2[0],\n    setShowPopup = _useState2[1];\n  var _useState3 = useState({\n      nickname: ''\n    }),\n    _useState4 = _slicedToArray(_useState3, 2),\n    inputText = _useState4[0],\n    setInputText = _useState4[1];\n  var _useState5 = useState([]),\n    _useState6 = _slicedToArray(_useState5, 2),\n    messages = _useState6[0],\n    setMessages = _useState6[1];\n  var handleSend = function handleSend(message) {\n    setMessages(function (prevMessages) {\n      return [].concat(_toConsumableArray(prevMessages), [message]);\n    });\n  };\n  var isFormValid = inputText.nickname;\n  var buttons = [{\n    onPress: function onPress(_ref2) {\n      _objectDestructuringEmpty(_ref2);\n      return navigation.navigate('Profile');\n    },\n    text: 'Мой аккаунт'\n  }, {\n    onPress: function onPress(_ref3) {\n      _objectDestructuringEmpty(_ref3);\n      return navigation.navigate('Auth');\n    },\n    text: 'Выйти'\n  }];\n  return _jsxs(View, {\n    style: styles.containerMain,\n    children: [_jsxs(View, {\n      style: styles.barChanContainer,\n      children: [_jsx(Text, {\n        style: styles.barText,\n        children: \"Channels name\"\n      }), _jsx(View, {\n        children: _jsx(HeaderButton, {\n          title: isMember ? 'Покинуть' : 'Присоединиться',\n          onPress: handleJoinLeave\n        })\n      }), isMember && isAdmin && _jsx(View, {\n        style: {\n          marginRight: 20\n        },\n        children: _jsx(SettingsSvg, {\n          onPress: handleSettingsPress\n        })\n      })]\n    }), isMember && _jsx(View, {\n      style: styles.sendContainer,\n      children: _jsx(MessageInput, {\n        onSend: handleSend\n      })\n    }), _jsx(View, {\n      style: styles.bottomLeft,\n      children: isMember && _jsx(TouchableHighlight, {\n        onPress: function onPress() {\n          return setShowPopup(true);\n        },\n        children: _jsx(CreateSvg, {})\n      })\n    }), _jsx(Modal, {\n      visible: showPopup,\n      transparent: true,\n      children: _jsxs(View, {\n        style: styles.popupContainer,\n        children: [_jsx(Text, {\n          style: styles.text,\n          children: \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u043A\\u0430\\u043D\\u0430\\u043B\\u0430\"\n        }), _jsx(View, {\n          style: {\n            marginBottom: 13,\n            alignItems: 'center'\n          },\n          children: _jsx(DataInput, {\n            value: inputText.nickname,\n            setValue: function setValue(text) {\n              return setInputText(_objectSpread(_objectSpread({}, inputText), {}, {\n                nickname: text\n              }));\n            },\n            placeholder: '',\n            type: 'nickname',\n            flex: true\n          })\n        }), _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return setShowPopup(false);\n          },\n          children: _jsx(View, {\n            children: _jsx(HeaderButton, {\n              title: 'Создать',\n              onPress: function onPress() {\n                return console.log();\n              },\n              disabled: !isFormValid\n            })\n          })\n        })]\n      })\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","View","Text","TouchableHighlight","Modal","TouchableOpacity","ScrollView","TextInput","CreateSvg","useStyles","SearchInput","HeaderButton","DataInput","SearchBody","ShowAvatar","BorderButton","ForwardMessage","MessageBody","MessageInput","SettingsSvg","jsx","_jsx","jsxs","_jsxs","ChannelScreen","_ref","navigation","styles","_useState","_useState2","_slicedToArray","showPopup","setShowPopup","_useState3","nickname","_useState4","inputText","setInputText","_useState5","_useState6","messages","setMessages","handleSend","message","prevMessages","concat","_toConsumableArray","isFormValid","buttons","onPress","_ref2","_objectDestructuringEmpty","navigate","text","_ref3","style","containerMain","children","barChanContainer","barText","title","isMember","handleJoinLeave","isAdmin","marginRight","handleSettingsPress","sendContainer","onSend","bottomLeft","visible","transparent","popupContainer","marginBottom","alignItems","value","setValue","_objectSpread","placeholder","type","flex","console","log","disabled"],"sources":["C:/Users/ilias/OneDrive/Рабочий стол/messenger_project/Application/Client/screens/ChannelScreen.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, TouchableHighlight, Modal, TouchableOpacity, ScrollView, TextInput } from 'react-native-web';\r\nimport CreateSvg from '../assets/icons/createSvg';\r\nimport useStyles from './styles/mainAuthScreen.module';\r\nimport SearchInput from '../components/inputs/searchInput/searchInput';\r\nimport HeaderButton from '../components/buttons/headerButton';\r\nimport DataInput from '../components/inputs/textInput/textInput';\r\nimport SearchBody from '../components/searchBodies/searchBody';\r\nimport ShowAvatar from '../components/Avatar/ShowAvatar/showAvatar';\r\nimport BorderButton from '../components/buttons/borderButton';\r\nimport ForwardMessage from '../components/forwardMessage/forwardMessage';\r\nimport MessageBody from '../components/messageBody/messageBody';\r\nimport MessageInput from '../components/inputs/messageInput/messageInput';\r\nimport SettingsSvg from '../assets/icons/settingsSvg';\r\n\r\n\r\nexport default function ChannelScreen({ navigation }) {\r\n    const styles = useStyles();\r\n    const [showPopup, setShowPopup] = useState(false);\r\n    const [inputText, setInputText] = useState({\r\n        nickname: '',\r\n    });\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    const handleSend = message => {\r\n        setMessages(prevMessages => [...prevMessages, message]);\r\n    };\r\n    const isFormValid = inputText.nickname;\r\n    const buttons = [\r\n        {\r\n            onPress: ({ }) => navigation.navigate('Profile'),\r\n            text: 'Мой аккаунт'\r\n        },\r\n        {\r\n            onPress: ({ }) => navigation.navigate('Auth'),\r\n            text: 'Выйти'\r\n        }\r\n    ]\r\n   \r\n    return (\r\n        <View style={styles.containerMain}>\r\n          <View style={styles.barChanContainer}>\r\n            <Text style={styles.barText}>Channels name</Text>\r\n            <View>\r\n              <HeaderButton title={isMember ? 'Покинуть' : 'Присоединиться'} onPress={handleJoinLeave} />\r\n            </View>\r\n            {isMember && isAdmin && (\r\n              <View style={{ marginRight: 20 }}>\r\n                <SettingsSvg onPress={handleSettingsPress} />\r\n              </View>\r\n            )}\r\n          </View>\r\n          {isMember && (\r\n            <View style={styles.sendContainer}>\r\n              <MessageInput onSend={handleSend} />\r\n            </View>\r\n          )}\r\n          <View style={styles.bottomLeft}>\r\n            {isMember && (\r\n              <TouchableHighlight onPress={() => setShowPopup(true)}>\r\n                <CreateSvg />\r\n              </TouchableHighlight>\r\n            )}\r\n          </View>\r\n          <Modal visible={showPopup} transparent={true}>\r\n            <View style={styles.popupContainer}>\r\n              <Text style={styles.text}>Название канала</Text>\r\n              <View style={{ marginBottom: 13, alignItems: 'center' }}>\r\n                <DataInput\r\n                  value={inputText.nickname}\r\n                  setValue={(text) => setInputText({ ...inputText, nickname: text })}\r\n                  placeholder={''}\r\n                  type={'nickname'}\r\n                  flex={true}\r\n                />\r\n              </View>\r\n              <TouchableOpacity onPress={() => setShowPopup(false)}>\r\n                <View>\r\n                  <HeaderButton title={'Создать'} onPress={() => console.log()} disabled={!isFormValid} />\r\n                </View>\r\n              </TouchableOpacity>\r\n            </View>\r\n          </Modal>\r\n        </View>\r\n      );\r\n    }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}