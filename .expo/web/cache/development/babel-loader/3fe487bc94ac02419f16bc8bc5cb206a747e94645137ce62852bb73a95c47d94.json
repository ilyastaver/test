{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _invariant = require(\"../utils/invariant\");\nvar _invariant2 = _interopRequireDefault(_invariant);\nvar _getScreenForRouteName = require(\"./getScreenForRouteName\");\nvar _getScreenForRouteName2 = _interopRequireDefault(_getScreenForRouteName);\nvar _createConfigGetter = require(\"./createConfigGetter\");\nvar _createConfigGetter2 = _interopRequireDefault(_createConfigGetter);\nvar _NavigationActions = require(\"../NavigationActions\");\nvar _NavigationActions2 = _interopRequireDefault(_NavigationActions);\nvar _StackActions = require(\"./StackActions\");\nvar _StackActions2 = _interopRequireDefault(_StackActions);\nvar _validateRouteConfigMap = require(\"./validateRouteConfigMap\");\nvar _validateRouteConfigMap2 = _interopRequireDefault(_validateRouteConfigMap);\nvar _pathUtils = require(\"./pathUtils\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar defaultActionCreators = function defaultActionCreators() {\n  return {};\n};\nfunction childrenUpdateWithoutSwitchingIndex(actionType) {\n  return [_NavigationActions2.default.SET_PARAMS, _StackActions2.default.COMPLETE_TRANSITION].includes(actionType);\n}\nexports.default = function (routeConfigs) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (0, _validateRouteConfigMap2.default)(routeConfigs);\n  var order = config.order || Object.keys(routeConfigs);\n  var getCustomActionCreators = config.getCustomActionCreators || defaultActionCreators;\n  var initialRouteParams = config.initialRouteParams;\n  var initialRouteName = config.initialRouteName || order[0];\n  var backBehavior = config.backBehavior || 'none';\n  var shouldBackNavigateToInitialRoute = backBehavior === 'initialRoute';\n  var resetOnBlur = config.hasOwnProperty('resetOnBlur') ? config.resetOnBlur : true;\n  var initialRouteIndex = order.indexOf(initialRouteName);\n  var childRouters = {};\n  order.forEach(function (routeName) {\n    childRouters[routeName] = null;\n    var screen = (0, _getScreenForRouteName2.default)(routeConfigs, routeName);\n    if (screen.router) {\n      childRouters[routeName] = screen.router;\n    }\n  });\n  function getParamsForRoute(routeName, params) {\n    var routeConfig = routeConfigs[routeName];\n    if (routeConfig && routeConfig.params) {\n      return _extends({}, routeConfig.params, params);\n    } else {\n      return params;\n    }\n  }\n  var _ref = (0, _pathUtils.createPathParser)(childRouters, routeConfigs, config),\n    getPathAndParamsForRoute = _ref.getPathAndParamsForRoute,\n    _getActionForPathAndParams = _ref.getActionForPathAndParams;\n  if (initialRouteIndex === -1) {\n    throw new Error(\"Invalid initialRouteName '\" + initialRouteName + \"'.\" + (\"Should be one of \" + order.map(function (n) {\n      return \"\\\"\" + n + \"\\\"\";\n    }).join(', ')));\n  }\n  function resetChildRoute(routeName) {\n    var initialParams = routeName === initialRouteName ? initialRouteParams : undefined;\n    var params = getParamsForRoute(routeName, initialParams);\n    var childRouter = childRouters[routeName];\n    if (childRouter) {\n      var childAction = _NavigationActions2.default.init();\n      return _extends({}, childRouter.getStateForAction(childAction), {\n        key: routeName,\n        routeName: routeName,\n        params: params\n      });\n    }\n    return {\n      key: routeName,\n      routeName: routeName,\n      params: params\n    };\n  }\n  function getNextState(prevState, possibleNextState) {\n    if (!prevState) {\n      return possibleNextState;\n    }\n    var nextState = void 0;\n    if (prevState.index !== possibleNextState.index && resetOnBlur) {\n      var prevRouteName = prevState.routes[prevState.index].routeName;\n      var nextRoutes = _toConsumableArray(possibleNextState.routes);\n      nextRoutes[prevState.index] = resetChildRoute(prevRouteName);\n      return _extends({}, possibleNextState, {\n        routes: nextRoutes\n      });\n    } else {\n      nextState = possibleNextState;\n    }\n    return nextState;\n  }\n  function getInitialState() {\n    var routes = order.map(resetChildRoute);\n    return {\n      routes: routes,\n      index: initialRouteIndex,\n      isTransitioning: false\n    };\n  }\n  return {\n    childRouters: childRouters,\n    getActionCreators: function getActionCreators(route, stateKey) {\n      return getCustomActionCreators(route, stateKey);\n    },\n    getStateForAction: function getStateForAction(action, inputState) {\n      var prevState = inputState ? _extends({}, inputState) : inputState;\n      var state = inputState || getInitialState();\n      var activeChildIndex = state.index;\n      if (action.type === _NavigationActions2.default.INIT) {\n        var params = action.params;\n        if (params) {\n          state.routes = state.routes.map(function (route) {\n            return _extends({}, route, {\n              params: _extends({}, route.params, params, route.routeName === initialRouteName ? initialRouteParams : null)\n            });\n          });\n        }\n      }\n      var activeChildLastState = state.routes[state.index];\n      var activeChildRouter = childRouters[order[state.index]];\n      if (activeChildRouter) {\n        var activeChildState = activeChildRouter.getStateForAction(action, activeChildLastState);\n        if (!activeChildState && inputState) {\n          return null;\n        }\n        if (activeChildState && activeChildState !== activeChildLastState) {\n          var _routes = _toConsumableArray(state.routes);\n          _routes[state.index] = activeChildState;\n          return getNextState(prevState, _extends({}, state, {\n            routes: _routes\n          }));\n        }\n      }\n      var isBackEligible = action.key == null || action.key === activeChildLastState.key;\n      if (action.type === _NavigationActions2.default.BACK) {\n        if (isBackEligible && shouldBackNavigateToInitialRoute) {\n          activeChildIndex = initialRouteIndex;\n        } else {\n          return state;\n        }\n      }\n      var didNavigate = false;\n      if (action.type === _NavigationActions2.default.NAVIGATE) {\n        didNavigate = !!order.find(function (childId, i) {\n          if (childId === action.routeName) {\n            activeChildIndex = i;\n            return true;\n          }\n          return false;\n        });\n        if (didNavigate) {\n          var childState = state.routes[activeChildIndex];\n          var childRouter = childRouters[action.routeName];\n          var newChildState = void 0;\n          if (action.action) {\n            newChildState = childRouter ? childRouter.getStateForAction(action.action, childState) : null;\n          } else if (!action.action && action.params) {\n            newChildState = _extends({}, childState, {\n              params: _extends({}, childState.params || {}, action.params)\n            });\n          }\n          if (newChildState && newChildState !== childState) {\n            var _routes2 = _toConsumableArray(state.routes);\n            _routes2[activeChildIndex] = newChildState;\n            return getNextState(prevState, _extends({}, state, {\n              routes: _routes2,\n              index: activeChildIndex\n            }));\n          } else if (!newChildState && state.index === activeChildIndex && prevState) {\n            return null;\n          }\n        }\n      }\n      if (action.type === _NavigationActions2.default.SET_PARAMS) {\n        var key = action.key;\n        var lastRoute = state.routes.find(function (route) {\n          return route.key === key;\n        });\n        if (lastRoute) {\n          var _params = _extends({}, lastRoute.params, action.params);\n          var _routes3 = _toConsumableArray(state.routes);\n          _routes3[state.routes.indexOf(lastRoute)] = _extends({}, lastRoute, {\n            params: _params\n          });\n          return getNextState(prevState, _extends({}, state, {\n            routes: _routes3\n          }));\n        }\n      }\n      if (activeChildIndex !== state.index) {\n        return getNextState(prevState, _extends({}, state, {\n          index: activeChildIndex\n        }));\n      } else if (didNavigate && !inputState) {\n        return state;\n      } else if (didNavigate) {\n        return _extends({}, state);\n      }\n      var index = state.index;\n      var routes = state.routes;\n      order.find(function (childId, i) {\n        var childRouter = childRouters[childId];\n        if (i === index) {\n          return false;\n        }\n        var childState = routes[i];\n        if (childRouter) {\n          childState = childRouter.getStateForAction(action, childState);\n        }\n        if (!childState) {\n          index = i;\n          return true;\n        }\n        if (childState !== routes[i]) {\n          routes = _toConsumableArray(routes);\n          routes[i] = childState;\n          index = i;\n          return true;\n        }\n        return false;\n      });\n      if (childrenUpdateWithoutSwitchingIndex(action.type)) {\n        index = state.index;\n      }\n      if (index !== state.index || routes !== state.routes) {\n        return getNextState(prevState, _extends({}, state, {\n          index: index,\n          routes: routes\n        }));\n      }\n      return state;\n    },\n    getComponentForState: function getComponentForState(state) {\n      var routeName = state.routes[state.index].routeName;\n      (0, _invariant2.default)(routeName, \"There is no route defined for index \" + state.index + \". Check that\\n        that you passed in a navigation state with a valid tab/screen index.\");\n      var childRouter = childRouters[routeName];\n      if (childRouter) {\n        return childRouter.getComponentForState(state.routes[state.index]);\n      }\n      return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);\n    },\n    getComponentForRouteName: function getComponentForRouteName(routeName) {\n      return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);\n    },\n    getPathAndParamsForState: function getPathAndParamsForState(state) {\n      var route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n    getActionForPathAndParams: function getActionForPathAndParams(path, params) {\n      return _getActionForPathAndParams(path, params);\n    },\n    getScreenOptions: (0, _createConfigGetter2.default)(routeConfigs, config.defaultNavigationOptions)\n  };\n};","map":{"version":3,"names":["_toConsumableArray","require","Object","defineProperty","exports","value","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_invariant","_invariant2","_interopRequireDefault","_getScreenForRouteName","_getScreenForRouteName2","_createConfigGetter","_createConfigGetter2","_NavigationActions","_NavigationActions2","_StackActions","_StackActions2","_validateRouteConfigMap","_validateRouteConfigMap2","_pathUtils","obj","__esModule","default","defaultActionCreators","childrenUpdateWithoutSwitchingIndex","actionType","SET_PARAMS","COMPLETE_TRANSITION","includes","routeConfigs","config","undefined","order","keys","getCustomActionCreators","initialRouteParams","initialRouteName","backBehavior","shouldBackNavigateToInitialRoute","resetOnBlur","initialRouteIndex","indexOf","childRouters","forEach","routeName","screen","router","getParamsForRoute","params","routeConfig","_ref","createPathParser","getPathAndParamsForRoute","getActionForPathAndParams","Error","map","n","join","resetChildRoute","initialParams","childRouter","childAction","init","getStateForAction","getNextState","prevState","possibleNextState","nextState","index","prevRouteName","routes","nextRoutes","getInitialState","isTransitioning","getActionCreators","route","stateKey","action","inputState","state","activeChildIndex","type","INIT","activeChildLastState","activeChildRouter","activeChildState","_routes","isBackEligible","BACK","didNavigate","NAVIGATE","find","childId","childState","newChildState","_routes2","lastRoute","_params","_routes3","getComponentForState","getComponentForRouteName","getPathAndParamsForState","path","getScreenOptions","defaultNavigationOptions"],"sources":["C:/Users/ilias/OneDrive/Рабочий стол/Documents/front/FrontM/node_modules/@react-navigation/core/dist/routers/SwitchRouter.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _invariant = require('../utils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _getScreenForRouteName = require('./getScreenForRouteName');\n\nvar _getScreenForRouteName2 = _interopRequireDefault(_getScreenForRouteName);\n\nvar _createConfigGetter = require('./createConfigGetter');\n\nvar _createConfigGetter2 = _interopRequireDefault(_createConfigGetter);\n\nvar _NavigationActions = require('../NavigationActions');\n\nvar _NavigationActions2 = _interopRequireDefault(_NavigationActions);\n\nvar _StackActions = require('./StackActions');\n\nvar _StackActions2 = _interopRequireDefault(_StackActions);\n\nvar _validateRouteConfigMap = require('./validateRouteConfigMap');\n\nvar _validateRouteConfigMap2 = _interopRequireDefault(_validateRouteConfigMap);\n\nvar _pathUtils = require('./pathUtils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar defaultActionCreators = () => ({});\n\nfunction childrenUpdateWithoutSwitchingIndex(actionType) {\n  return [_NavigationActions2.default.SET_PARAMS,\n  // Todo: make SwitchRouter not depend on StackActions..\n  _StackActions2.default.COMPLETE_TRANSITION].includes(actionType);\n}\n\nexports.default = (routeConfigs, config = {}) => {\n  // Fail fast on invalid route definitions\n  (0, _validateRouteConfigMap2.default)(routeConfigs);\n\n  var order = config.order || Object.keys(routeConfigs);\n\n  var getCustomActionCreators = config.getCustomActionCreators || defaultActionCreators;\n\n  var initialRouteParams = config.initialRouteParams;\n  var initialRouteName = config.initialRouteName || order[0];\n  var backBehavior = config.backBehavior || 'none';\n  var shouldBackNavigateToInitialRoute = backBehavior === 'initialRoute';\n  var resetOnBlur = config.hasOwnProperty('resetOnBlur') ? config.resetOnBlur : true;\n  var initialRouteIndex = order.indexOf(initialRouteName);\n  var childRouters = {};\n  order.forEach(routeName => {\n    childRouters[routeName] = null;\n    var screen = (0, _getScreenForRouteName2.default)(routeConfigs, routeName);\n    if (screen.router) {\n      childRouters[routeName] = screen.router;\n    }\n  });\n\n  function getParamsForRoute(routeName, params) {\n    var routeConfig = routeConfigs[routeName];\n    if (routeConfig && routeConfig.params) {\n      return _extends({}, routeConfig.params, params);\n    } else {\n      return params;\n    }\n  }\n\n  var {\n    getPathAndParamsForRoute,\n    getActionForPathAndParams\n  } = (0, _pathUtils.createPathParser)(childRouters, routeConfigs, config);\n\n  if (initialRouteIndex === -1) {\n    throw new Error(`Invalid initialRouteName '${initialRouteName}'.` + `Should be one of ${order.map(n => `\"${n}\"`).join(', ')}`);\n  }\n\n  function resetChildRoute(routeName) {\n    var initialParams = routeName === initialRouteName ? initialRouteParams : undefined;\n    // note(brentvatne): merging initialRouteParams *on top* of default params\n    // on the route seems incorrect but it's consistent with existing behavior\n    // in stackrouter\n    var params = getParamsForRoute(routeName, initialParams);\n    var childRouter = childRouters[routeName];\n    if (childRouter) {\n      var childAction = _NavigationActions2.default.init();\n      return _extends({}, childRouter.getStateForAction(childAction), {\n        key: routeName,\n        routeName,\n        params\n      });\n    }\n    return {\n      key: routeName,\n      routeName,\n      params\n    };\n  }\n\n  function getNextState(prevState, possibleNextState) {\n    if (!prevState) {\n      return possibleNextState;\n    }\n\n    var nextState = void 0;\n    if (prevState.index !== possibleNextState.index && resetOnBlur) {\n      var prevRouteName = prevState.routes[prevState.index].routeName;\n      var nextRoutes = [...possibleNextState.routes];\n      nextRoutes[prevState.index] = resetChildRoute(prevRouteName);\n\n      return _extends({}, possibleNextState, {\n        routes: nextRoutes\n      });\n    } else {\n      nextState = possibleNextState;\n    }\n\n    return nextState;\n  }\n\n  function getInitialState() {\n    var routes = order.map(resetChildRoute);\n    return {\n      routes,\n      index: initialRouteIndex,\n      isTransitioning: false\n    };\n  }\n\n  return {\n    childRouters,\n\n    getActionCreators(route, stateKey) {\n      return getCustomActionCreators(route, stateKey);\n    },\n\n    getStateForAction(action, inputState) {\n      var prevState = inputState ? _extends({}, inputState) : inputState;\n      var state = inputState || getInitialState();\n      var activeChildIndex = state.index;\n\n      if (action.type === _NavigationActions2.default.INIT) {\n        // NOTE(brentvatne): this seems weird... why are we merging these\n        // params into child routes?\n        // ---------------------------------------------------------------\n        // Merge any params from the action into all the child routes\n        var { params } = action;\n        if (params) {\n          state.routes = state.routes.map(route => _extends({}, route, {\n            params: _extends({}, route.params, params, route.routeName === initialRouteName ? initialRouteParams : null)\n          }));\n        }\n      }\n\n      // Let the current child handle it\n      var activeChildLastState = state.routes[state.index];\n      var activeChildRouter = childRouters[order[state.index]];\n      if (activeChildRouter) {\n        var activeChildState = activeChildRouter.getStateForAction(action, activeChildLastState);\n        if (!activeChildState && inputState) {\n          return null;\n        }\n        if (activeChildState && activeChildState !== activeChildLastState) {\n          var _routes = [...state.routes];\n          _routes[state.index] = activeChildState;\n          return getNextState(prevState, _extends({}, state, {\n            routes: _routes\n          }));\n        }\n      }\n\n      // Handle tab changing. Do this after letting the current tab try to\n      // handle the action, to allow inner children to change first\n      var isBackEligible = action.key == null || action.key === activeChildLastState.key;\n      if (action.type === _NavigationActions2.default.BACK) {\n        if (isBackEligible && shouldBackNavigateToInitialRoute) {\n          activeChildIndex = initialRouteIndex;\n        } else {\n          return state;\n        }\n      }\n\n      var didNavigate = false;\n      if (action.type === _NavigationActions2.default.NAVIGATE) {\n        didNavigate = !!order.find((childId, i) => {\n          if (childId === action.routeName) {\n            activeChildIndex = i;\n            return true;\n          }\n          return false;\n        });\n        if (didNavigate) {\n          var childState = state.routes[activeChildIndex];\n          var childRouter = childRouters[action.routeName];\n          var newChildState = void 0;\n\n          if (action.action) {\n            newChildState = childRouter ? childRouter.getStateForAction(action.action, childState) : null;\n          } else if (!action.action && action.params) {\n            newChildState = _extends({}, childState, {\n              params: _extends({}, childState.params || {}, action.params)\n            });\n          }\n\n          if (newChildState && newChildState !== childState) {\n            var _routes2 = [...state.routes];\n            _routes2[activeChildIndex] = newChildState;\n            return getNextState(prevState, _extends({}, state, {\n              routes: _routes2,\n              index: activeChildIndex\n            }));\n          } else if (!newChildState && state.index === activeChildIndex && prevState) {\n            return null;\n          }\n        }\n      }\n\n      if (action.type === _NavigationActions2.default.SET_PARAMS) {\n        var key = action.key;\n        var lastRoute = state.routes.find(route => route.key === key);\n        if (lastRoute) {\n          var _params = _extends({}, lastRoute.params, action.params);\n          var _routes3 = [...state.routes];\n          _routes3[state.routes.indexOf(lastRoute)] = _extends({}, lastRoute, {\n            params: _params\n          });\n          return getNextState(prevState, _extends({}, state, {\n            routes: _routes3\n          }));\n        }\n      }\n\n      if (activeChildIndex !== state.index) {\n        return getNextState(prevState, _extends({}, state, {\n          index: activeChildIndex\n        }));\n      } else if (didNavigate && !inputState) {\n        return state;\n      } else if (didNavigate) {\n        return _extends({}, state);\n      }\n\n      // Let other children handle it and switch to the first child that returns a new state\n      var index = state.index;\n      var routes = state.routes;\n      order.find((childId, i) => {\n        var childRouter = childRouters[childId];\n        if (i === index) {\n          return false;\n        }\n        var childState = routes[i];\n        if (childRouter) {\n          childState = childRouter.getStateForAction(action, childState);\n        }\n        if (!childState) {\n          index = i;\n          return true;\n        }\n        if (childState !== routes[i]) {\n          routes = [...routes];\n          routes[i] = childState;\n          index = i;\n          return true;\n        }\n        return false;\n      });\n\n      // Nested routers can be updated after switching children with actions such as SET_PARAMS\n      // and COMPLETE_TRANSITION.\n      // NOTE: This may be problematic with custom routers because we whitelist the actions\n      // that can be handled by child routers without automatically changing index.\n      if (childrenUpdateWithoutSwitchingIndex(action.type)) {\n        index = state.index;\n      }\n\n      if (index !== state.index || routes !== state.routes) {\n        return getNextState(prevState, _extends({}, state, {\n          index,\n          routes\n        }));\n      }\n      return state;\n    },\n\n    getComponentForState(state) {\n      var routeName = state.routes[state.index].routeName;\n      (0, _invariant2.default)(routeName, `There is no route defined for index ${state.index}. Check that\n        that you passed in a navigation state with a valid tab/screen index.`);\n      var childRouter = childRouters[routeName];\n      if (childRouter) {\n        return childRouter.getComponentForState(state.routes[state.index]);\n      }\n      return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);\n    },\n\n    getComponentForRouteName(routeName) {\n      return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);\n    },\n\n    getPathAndParamsForState(state) {\n      var route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n\n    getActionForPathAndParams(path, params) {\n      return getActionForPathAndParams(path, params);\n    },\n\n    getScreenOptions: (0, _createConfigGetter2.default)(routeConfigs, config.defaultNavigationOptions)\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}