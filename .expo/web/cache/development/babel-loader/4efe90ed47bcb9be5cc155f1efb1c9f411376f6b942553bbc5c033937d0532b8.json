{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _NavigationActions = require(\"../NavigationActions\");\nvar _NavigationActions2 = _interopRequireDefault(_NavigationActions);\nvar _StackActions = require(\"./StackActions\");\nvar _StackActions2 = _interopRequireDefault(_StackActions);\nvar _createConfigGetter = require(\"./createConfigGetter\");\nvar _createConfigGetter2 = _interopRequireDefault(_createConfigGetter);\nvar _getScreenForRouteName = require(\"./getScreenForRouteName\");\nvar _getScreenForRouteName2 = _interopRequireDefault(_getScreenForRouteName);\nvar _StateUtils = require(\"../StateUtils\");\nvar _StateUtils2 = _interopRequireDefault(_StateUtils);\nvar _validateRouteConfigMap = require(\"./validateRouteConfigMap\");\nvar _validateRouteConfigMap2 = _interopRequireDefault(_validateRouteConfigMap);\nvar _invariant = require(\"../utils/invariant\");\nvar _invariant2 = _interopRequireDefault(_invariant);\nvar _KeyGenerator = require(\"./KeyGenerator\");\nvar _pathUtils = require(\"./pathUtils\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction behavesLikePushAction(action) {\n  return action.type === _NavigationActions2.default.NAVIGATE || action.type === _StackActions2.default.PUSH;\n}\nvar defaultActionCreators = function defaultActionCreators() {\n  return {};\n};\nfunction isResetToRootStack(action) {\n  return action.type === _StackActions2.default.RESET && action.key === null;\n}\nexports.default = function (routeConfigs) {\n  var stackConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (0, _validateRouteConfigMap2.default)(routeConfigs);\n  var childRouters = {};\n  var routeNames = Object.keys(routeConfigs);\n  routeNames.forEach(function (routeName) {\n    var screen = (0, _getScreenForRouteName2.default)(routeConfigs, routeName);\n    if (screen && screen.router) {\n      childRouters[routeName] = screen.router;\n    } else {\n      childRouters[routeName] = null;\n    }\n  });\n  var initialRouteParams = stackConfig.initialRouteParams;\n  var getCustomActionCreators = stackConfig.getCustomActionCreators || defaultActionCreators;\n  var initialRouteName = stackConfig.initialRouteName || routeNames[0];\n  var initialChildRouter = childRouters[initialRouteName];\n  function getInitialState(action) {\n    var route = {};\n    var childRouter = childRouters[action.routeName];\n    if (behavesLikePushAction(action) && childRouter !== undefined) {\n      var childState = {};\n      if (childRouter !== null) {\n        var childAction = action.action || _NavigationActions2.default.init({\n          params: action.params\n        });\n        childState = childRouter.getStateForAction(childAction);\n      }\n      return {\n        key: 'StackRouterRoot',\n        isTransitioning: false,\n        index: 0,\n        routes: [_extends({\n          params: action.params\n        }, childState, {\n          key: action.key || (0, _KeyGenerator.generateKey)(),\n          routeName: action.routeName\n        })]\n      };\n    }\n    if (initialChildRouter) {\n      route = initialChildRouter.getStateForAction(_NavigationActions2.default.navigate({\n        routeName: initialRouteName,\n        params: initialRouteParams\n      }));\n    }\n    var params = (routeConfigs[initialRouteName].params || route.params || action.params || initialRouteParams) && _extends({}, routeConfigs[initialRouteName].params || {}, route.params || {}, action.params || {}, initialRouteParams || {});\n    var initialRouteKey = stackConfig.initialRouteKey;\n    route = _extends({}, route, params ? {\n      params: params\n    } : {}, {\n      routeName: initialRouteName,\n      key: action.key || initialRouteKey || (0, _KeyGenerator.generateKey)()\n    });\n    return {\n      key: 'StackRouterRoot',\n      isTransitioning: false,\n      index: 0,\n      routes: [route]\n    };\n  }\n  function getParamsForRouteAndAction(routeName, action) {\n    var routeConfig = routeConfigs[routeName];\n    if (routeConfig && routeConfig.params) {\n      return _extends({}, routeConfig.params, action.params);\n    } else {\n      return action.params;\n    }\n  }\n  var _ref = (0, _pathUtils.createPathParser)(childRouters, routeConfigs, stackConfig),\n    getPathAndParamsForRoute = _ref.getPathAndParamsForRoute,\n    _getActionForPathAndParams = _ref.getActionForPathAndParams;\n  return {\n    childRouters: childRouters,\n    getComponentForState: function getComponentForState(state) {\n      var activeChildRoute = state.routes[state.index];\n      var routeName = activeChildRoute.routeName;\n      if (childRouters[routeName]) {\n        return childRouters[routeName].getComponentForState(activeChildRoute);\n      }\n      return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);\n    },\n    getComponentForRouteName: function getComponentForRouteName(routeName) {\n      return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);\n    },\n    getActionCreators: function getActionCreators(route, navStateKey) {\n      return _extends({}, getCustomActionCreators(route, navStateKey), {\n        pop: function pop(n, params) {\n          return _StackActions2.default.pop(_extends({\n            n: n\n          }, params));\n        },\n        popToTop: function popToTop(params) {\n          return _StackActions2.default.popToTop(params);\n        },\n        push: function push(routeName, params, action) {\n          return _StackActions2.default.push({\n            routeName: routeName,\n            params: params,\n            action: action\n          });\n        },\n        replace: function replace(replaceWith, params, action, newKey) {\n          if (typeof replaceWith === 'string') {\n            return _StackActions2.default.replace({\n              routeName: replaceWith,\n              params: params,\n              action: action,\n              key: route.key,\n              newKey: newKey\n            });\n          }\n          (0, _invariant2.default)(typeof replaceWith === 'object', 'Must replaceWith an object or a string');\n          (0, _invariant2.default)(params == null, 'Params must not be provided to .replace() when specifying an object');\n          (0, _invariant2.default)(action == null, 'Child action must not be provided to .replace() when specifying an object');\n          (0, _invariant2.default)(newKey == null, 'Child action must not be provided to .replace() when specifying an object');\n          return _StackActions2.default.replace(replaceWith);\n        },\n        reset: function reset(actions, index) {\n          return _StackActions2.default.reset({\n            actions: actions,\n            index: index == null ? actions.length - 1 : index,\n            key: navStateKey\n          });\n        },\n        dismiss: function dismiss() {\n          return _NavigationActions2.default.back({\n            key: navStateKey\n          });\n        }\n      });\n    },\n    getStateForAction: function getStateForAction(action, state) {\n      if (!state) {\n        return getInitialState(action);\n      }\n      var activeChildRoute = state.routes[state.index];\n      if (!isResetToRootStack(action) && action.type !== _NavigationActions2.default.NAVIGATE) {\n        var activeChildRouter = childRouters[activeChildRoute.routeName];\n        if (activeChildRouter) {\n          var route = activeChildRouter.getStateForAction(action, activeChildRoute);\n          if (route !== null && route !== activeChildRoute) {\n            return _StateUtils2.default.replaceAt(state, activeChildRoute.key, route, action.type === _NavigationActions2.default.SET_PARAMS);\n          }\n        }\n      } else if (action.type === _NavigationActions2.default.NAVIGATE) {\n        for (var childRoute of state.routes.slice().reverse()) {\n          var childRouter = childRouters[childRoute.routeName];\n          var childAction = action.routeName === childRoute.routeName && action.action ? action.action : action;\n          if (childRouter) {\n            var nextRouteState = childRouter.getStateForAction(childAction, childRoute);\n            if (nextRouteState === null || nextRouteState !== childRoute) {\n              var newState = _StateUtils2.default.replaceAndPrune(state, nextRouteState ? nextRouteState.key : childRoute.key, nextRouteState ? nextRouteState : childRoute);\n              return _extends({}, newState, {\n                isTransitioning: state.index !== newState.index ? action.immediate !== true : state.isTransitioning\n              });\n            }\n          }\n        }\n      }\n      if (behavesLikePushAction(action) && childRouters[action.routeName] !== undefined) {\n        var _childRouter = childRouters[action.routeName];\n        var _route = void 0;\n        (0, _invariant2.default)(action.type !== _StackActions2.default.PUSH || action.key == null, 'StackRouter does not support key on the push action');\n        var lastRouteIndex = state.routes.findIndex(function (r) {\n          if (action.key) {\n            return r.key === action.key;\n          } else {\n            return r.routeName === action.routeName;\n          }\n        });\n        if (action.type !== _StackActions2.default.PUSH && lastRouteIndex !== -1) {\n          if (state.index === lastRouteIndex && !action.params) {\n            return null;\n          }\n          var routes = state.routes.slice(0, lastRouteIndex + 1);\n          if (action.params) {\n            var _route2 = state.routes[lastRouteIndex];\n            routes[lastRouteIndex] = _extends({}, _route2, {\n              params: _extends({}, _route2.params, action.params)\n            });\n          }\n          return _extends({}, state, {\n            isTransitioning: state.index !== lastRouteIndex ? action.immediate !== true : state.isTransitioning,\n            index: lastRouteIndex,\n            routes: routes\n          });\n        }\n        if (_childRouter) {\n          var _childAction = action.action || _NavigationActions2.default.init({\n            params: getParamsForRouteAndAction(action.routeName, action)\n          });\n          _route = _extends({\n            params: getParamsForRouteAndAction(action.routeName, action)\n          }, _childRouter.getStateForAction(_childAction), {\n            routeName: action.routeName,\n            key: action.key || (0, _KeyGenerator.generateKey)()\n          });\n        } else {\n          _route = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            routeName: action.routeName,\n            key: action.key || (0, _KeyGenerator.generateKey)()\n          };\n        }\n        return _extends({}, _StateUtils2.default.push(state, _route), {\n          isTransitioning: action.immediate !== true\n        });\n      } else if (action.type === _StackActions2.default.PUSH && childRouters[action.routeName] === undefined) {\n        return state;\n      }\n      if (behavesLikePushAction(action)) {\n        var childRouterNames = Object.keys(childRouters);\n        for (var i = 0; i < childRouterNames.length; i++) {\n          var childRouterName = childRouterNames[i];\n          var _childRouter2 = childRouters[childRouterName];\n          if (_childRouter2) {\n            var initChildRoute = _childRouter2.getStateForAction(_NavigationActions2.default.init());\n            var navigatedChildRoute = _childRouter2.getStateForAction(action, initChildRoute);\n            var routeToPush = null;\n            if (navigatedChildRoute === null) {\n              routeToPush = initChildRoute;\n            } else if (navigatedChildRoute !== initChildRoute) {\n              routeToPush = navigatedChildRoute;\n            }\n            if (routeToPush) {\n              var _route3 = _extends({}, routeToPush, {\n                routeName: childRouterName,\n                key: action.key || (0, _KeyGenerator.generateKey)()\n              });\n              return _extends({}, _StateUtils2.default.push(state, _route3), {\n                isTransitioning: action.immediate !== true\n              });\n            }\n          }\n        }\n      }\n      if (action.type === _StackActions2.default.POP_TO_TOP) {\n        if (action.key && state.key !== action.key) {\n          return state;\n        }\n        if (state.index > 0) {\n          return _extends({}, state, {\n            isTransitioning: action.immediate !== true,\n            index: 0,\n            routes: [state.routes[0]]\n          });\n        }\n        return state;\n      }\n      if (action.type === _StackActions2.default.REPLACE) {\n        var routeIndex = void 0;\n        if (action.key === undefined && state.routes.length) {\n          routeIndex = state.routes.length - 1;\n        } else {\n          routeIndex = state.routes.findIndex(function (r) {\n            return r.key === action.key;\n          });\n        }\n        if (routeIndex !== -1) {\n          var _childRouter3 = childRouters[action.routeName];\n          var childState = {};\n          if (_childRouter3) {\n            var _childAction2 = action.action || _NavigationActions2.default.init({\n              params: getParamsForRouteAndAction(action.routeName, action)\n            });\n            childState = _childRouter3.getStateForAction(_childAction2);\n          }\n          var _routes = _toConsumableArray(state.routes);\n          _routes[routeIndex] = _extends({\n            params: getParamsForRouteAndAction(action.routeName, action)\n          }, childState, {\n            routeName: action.routeName,\n            key: action.newKey || (0, _KeyGenerator.generateKey)()\n          });\n          return _extends({}, state, {\n            routes: _routes\n          });\n        }\n      }\n      if (action.type === _StackActions2.default.COMPLETE_TRANSITION && (action.key == null || action.key === state.key) && state.isTransitioning) {\n        return _extends({}, state, {\n          isTransitioning: false\n        });\n      }\n      if (action.type === _NavigationActions2.default.SET_PARAMS) {\n        var key = action.key;\n        var lastRoute = state.routes.find(function (route) {\n          return route.key === key;\n        });\n        if (lastRoute) {\n          var params = _extends({}, lastRoute.params, action.params);\n          var _routes2 = _toConsumableArray(state.routes);\n          _routes2[state.routes.indexOf(lastRoute)] = _extends({}, lastRoute, {\n            params: params\n          });\n          return _extends({}, state, {\n            routes: _routes2\n          });\n        }\n      }\n      if (action.type === _StackActions2.default.RESET) {\n        if (action.key != null && action.key != state.key) {\n          return state;\n        }\n        var newStackActions = action.actions;\n        return _extends({}, state, {\n          routes: newStackActions.map(function (newStackAction) {\n            var router = childRouters[newStackAction.routeName];\n            var childState = {};\n            if (router) {\n              var _childAction3 = newStackAction.action || _NavigationActions2.default.init({\n                params: getParamsForRouteAndAction(newStackAction.routeName, newStackAction)\n              });\n              childState = router.getStateForAction(_childAction3);\n            }\n            return _extends({\n              params: getParamsForRouteAndAction(newStackAction.routeName, newStackAction)\n            }, childState, {\n              routeName: newStackAction.routeName,\n              key: newStackAction.key || (0, _KeyGenerator.generateKey)()\n            });\n          }),\n          index: action.index\n        });\n      }\n      if (action.type === _NavigationActions2.default.BACK || action.type === _StackActions2.default.POP) {\n        var _key = action.key,\n          n = action.n,\n          immediate = action.immediate;\n        var backRouteIndex = state.index;\n        if (action.type === _StackActions2.default.POP && n != null) {\n          backRouteIndex = Math.max(1, state.index - n + 1);\n        } else if (_key) {\n          var backRoute = state.routes.find(function (route) {\n            return route.key === _key;\n          });\n          backRouteIndex = state.routes.indexOf(backRoute);\n        }\n        if (backRouteIndex > 0) {\n          return _extends({}, state, {\n            routes: state.routes.slice(0, backRouteIndex),\n            index: backRouteIndex - 1,\n            isTransitioning: immediate !== true\n          });\n        }\n      }\n      var keyIndex = action.key ? _StateUtils2.default.indexOf(state, action.key) : -1;\n      for (var _childRoute of state.routes.slice().reverse()) {\n        if (_childRoute.key === activeChildRoute.key) {\n          continue;\n        }\n        if (keyIndex >= 0 && _childRoute.key !== action.key) {\n          continue;\n        }\n        var _childRouter4 = childRouters[_childRoute.routeName];\n        if (_childRouter4) {\n          var _route4 = _childRouter4.getStateForAction(action, _childRoute);\n          if (_route4 === null) {\n            return state;\n          } else if (_route4 && _route4 !== _childRoute) {\n            return _StateUtils2.default.replaceAt(state, _childRoute.key, _route4, action.type === _NavigationActions2.default.SET_PARAMS || action.type === _StackActions2.default.COMPLETE_TRANSITION);\n          }\n        }\n      }\n      return state;\n    },\n    getPathAndParamsForState: function getPathAndParamsForState(state) {\n      var route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n    getActionForPathAndParams: function getActionForPathAndParams(path, params) {\n      return _getActionForPathAndParams(path, params);\n    },\n    getScreenOptions: (0, _createConfigGetter2.default)(routeConfigs, stackConfig.defaultNavigationOptions)\n  };\n};","map":{"version":3,"names":["_toConsumableArray","require","Object","defineProperty","exports","value","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_NavigationActions","_NavigationActions2","_interopRequireDefault","_StackActions","_StackActions2","_createConfigGetter","_createConfigGetter2","_getScreenForRouteName","_getScreenForRouteName2","_StateUtils","_StateUtils2","_validateRouteConfigMap","_validateRouteConfigMap2","_invariant","_invariant2","_KeyGenerator","_pathUtils","obj","__esModule","default","behavesLikePushAction","action","type","NAVIGATE","PUSH","defaultActionCreators","isResetToRootStack","RESET","routeConfigs","stackConfig","undefined","childRouters","routeNames","keys","forEach","routeName","screen","router","initialRouteParams","getCustomActionCreators","initialRouteName","initialChildRouter","getInitialState","route","childRouter","childState","childAction","init","params","getStateForAction","isTransitioning","index","routes","generateKey","navigate","initialRouteKey","getParamsForRouteAndAction","routeConfig","_ref","createPathParser","getPathAndParamsForRoute","getActionForPathAndParams","getComponentForState","state","activeChildRoute","getComponentForRouteName","getActionCreators","navStateKey","pop","n","popToTop","push","replace","replaceWith","newKey","reset","actions","dismiss","back","activeChildRouter","replaceAt","SET_PARAMS","childRoute","slice","reverse","nextRouteState","newState","replaceAndPrune","immediate","_childRouter","_route","lastRouteIndex","findIndex","r","_route2","_childAction","childRouterNames","childRouterName","_childRouter2","initChildRoute","navigatedChildRoute","routeToPush","_route3","POP_TO_TOP","REPLACE","routeIndex","_childRouter3","_childAction2","_routes","COMPLETE_TRANSITION","lastRoute","find","_routes2","indexOf","newStackActions","map","newStackAction","_childAction3","BACK","POP","_key","backRouteIndex","Math","max","backRoute","keyIndex","_childRoute","_childRouter4","_route4","getPathAndParamsForState","path","getScreenOptions","defaultNavigationOptions"],"sources":["C:/Users/ilias/OneDrive/Рабочий стол/Documents/front/FrontM/node_modules/@react-navigation/core/dist/routers/StackRouter.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _NavigationActions = require('../NavigationActions');\n\nvar _NavigationActions2 = _interopRequireDefault(_NavigationActions);\n\nvar _StackActions = require('./StackActions');\n\nvar _StackActions2 = _interopRequireDefault(_StackActions);\n\nvar _createConfigGetter = require('./createConfigGetter');\n\nvar _createConfigGetter2 = _interopRequireDefault(_createConfigGetter);\n\nvar _getScreenForRouteName = require('./getScreenForRouteName');\n\nvar _getScreenForRouteName2 = _interopRequireDefault(_getScreenForRouteName);\n\nvar _StateUtils = require('../StateUtils');\n\nvar _StateUtils2 = _interopRequireDefault(_StateUtils);\n\nvar _validateRouteConfigMap = require('./validateRouteConfigMap');\n\nvar _validateRouteConfigMap2 = _interopRequireDefault(_validateRouteConfigMap);\n\nvar _invariant = require('../utils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _KeyGenerator = require('./KeyGenerator');\n\nvar _pathUtils = require('./pathUtils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction behavesLikePushAction(action) {\n  return action.type === _NavigationActions2.default.NAVIGATE || action.type === _StackActions2.default.PUSH;\n}\n\nvar defaultActionCreators = () => ({});\n\nfunction isResetToRootStack(action) {\n  return action.type === _StackActions2.default.RESET && action.key === null;\n}\n\nexports.default = (routeConfigs, stackConfig = {}) => {\n  // Fail fast on invalid route definitions\n  (0, _validateRouteConfigMap2.default)(routeConfigs);\n\n  var childRouters = {};\n  var routeNames = Object.keys(routeConfigs);\n\n  // Loop through routes and find child routers\n  routeNames.forEach(routeName => {\n    var screen = (0, _getScreenForRouteName2.default)(routeConfigs, routeName);\n    if (screen && screen.router) {\n      // If it has a router it's a navigator.\n      childRouters[routeName] = screen.router;\n    } else {\n      // If it doesn't have router it's an ordinary React component.\n      childRouters[routeName] = null;\n    }\n  });\n\n  var { initialRouteParams } = stackConfig;\n  var getCustomActionCreators = stackConfig.getCustomActionCreators || defaultActionCreators;\n\n  var initialRouteName = stackConfig.initialRouteName || routeNames[0];\n\n  var initialChildRouter = childRouters[initialRouteName];\n\n  function getInitialState(action) {\n    var route = {};\n    var childRouter = childRouters[action.routeName];\n\n    // This is a push-like action, and childRouter will be a router or null if we are responsible for this routeName\n    if (behavesLikePushAction(action) && childRouter !== undefined) {\n      var childState = {};\n      // The router is null for normal leaf routes\n      if (childRouter !== null) {\n        var childAction = action.action || _NavigationActions2.default.init({ params: action.params });\n        childState = childRouter.getStateForAction(childAction);\n      }\n      return {\n        key: 'StackRouterRoot',\n        isTransitioning: false,\n        index: 0,\n        routes: [_extends({\n          params: action.params\n        }, childState, {\n          key: action.key || (0, _KeyGenerator.generateKey)(),\n          routeName: action.routeName\n        })]\n      };\n    }\n\n    if (initialChildRouter) {\n      route = initialChildRouter.getStateForAction(_NavigationActions2.default.navigate({\n        routeName: initialRouteName,\n        params: initialRouteParams\n      }));\n    }\n    var params = (routeConfigs[initialRouteName].params || route.params || action.params || initialRouteParams) && _extends({}, routeConfigs[initialRouteName].params || {}, route.params || {}, action.params || {}, initialRouteParams || {});\n    var { initialRouteKey } = stackConfig;\n    route = _extends({}, route, params ? { params } : {}, {\n      routeName: initialRouteName,\n      key: action.key || initialRouteKey || (0, _KeyGenerator.generateKey)()\n    });\n    return {\n      key: 'StackRouterRoot',\n      isTransitioning: false,\n      index: 0,\n      routes: [route]\n    };\n  }\n\n  function getParamsForRouteAndAction(routeName, action) {\n    var routeConfig = routeConfigs[routeName];\n    if (routeConfig && routeConfig.params) {\n      return _extends({}, routeConfig.params, action.params);\n    } else {\n      return action.params;\n    }\n  }\n\n  var {\n    getPathAndParamsForRoute,\n    getActionForPathAndParams\n  } = (0, _pathUtils.createPathParser)(childRouters, routeConfigs, stackConfig);\n\n  return {\n    childRouters,\n\n    getComponentForState(state) {\n      var activeChildRoute = state.routes[state.index];\n      var { routeName } = activeChildRoute;\n      if (childRouters[routeName]) {\n        return childRouters[routeName].getComponentForState(activeChildRoute);\n      }\n      return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);\n    },\n\n    getComponentForRouteName(routeName) {\n      return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);\n    },\n\n    getActionCreators(route, navStateKey) {\n      return _extends({}, getCustomActionCreators(route, navStateKey), {\n        pop: (n, params) => _StackActions2.default.pop(_extends({\n          n\n        }, params)),\n        popToTop: params => _StackActions2.default.popToTop(params),\n        push: (routeName, params, action) => _StackActions2.default.push({\n          routeName,\n          params,\n          action\n        }),\n        replace: (replaceWith, params, action, newKey) => {\n          if (typeof replaceWith === 'string') {\n            return _StackActions2.default.replace({\n              routeName: replaceWith,\n              params,\n              action,\n              key: route.key,\n              newKey\n            });\n          }\n          (0, _invariant2.default)(typeof replaceWith === 'object', 'Must replaceWith an object or a string');\n          (0, _invariant2.default)(params == null, 'Params must not be provided to .replace() when specifying an object');\n          (0, _invariant2.default)(action == null, 'Child action must not be provided to .replace() when specifying an object');\n          (0, _invariant2.default)(newKey == null, 'Child action must not be provided to .replace() when specifying an object');\n          return _StackActions2.default.replace(replaceWith);\n        },\n        reset: (actions, index) => _StackActions2.default.reset({\n          actions,\n          index: index == null ? actions.length - 1 : index,\n          key: navStateKey\n        }),\n        dismiss: () => _NavigationActions2.default.back({\n          key: navStateKey\n        })\n      });\n    },\n\n    getStateForAction(action, state) {\n      // Set up the initial state if needed\n      if (!state) {\n        return getInitialState(action);\n      }\n\n      var activeChildRoute = state.routes[state.index];\n\n      if (!isResetToRootStack(action) && action.type !== _NavigationActions2.default.NAVIGATE) {\n        // Let the active child router handle the action\n        var activeChildRouter = childRouters[activeChildRoute.routeName];\n        if (activeChildRouter) {\n          var route = activeChildRouter.getStateForAction(action, activeChildRoute);\n          if (route !== null && route !== activeChildRoute) {\n            return _StateUtils2.default.replaceAt(state, activeChildRoute.key, route,\n            // the following tells replaceAt to NOT change the index to this route for the setParam action, because people don't expect param-setting actions to switch the active route\n            action.type === _NavigationActions2.default.SET_PARAMS);\n          }\n        }\n      } else if (action.type === _NavigationActions2.default.NAVIGATE) {\n        // Traverse routes from the top of the stack to the bottom, so the\n        // active route has the first opportunity, then the one before it, etc.\n        for (var childRoute of state.routes.slice().reverse()) {\n          var childRouter = childRouters[childRoute.routeName];\n          var childAction = action.routeName === childRoute.routeName && action.action ? action.action : action;\n\n          if (childRouter) {\n            var nextRouteState = childRouter.getStateForAction(childAction, childRoute);\n\n            if (nextRouteState === null || nextRouteState !== childRoute) {\n              var newState = _StateUtils2.default.replaceAndPrune(state, nextRouteState ? nextRouteState.key : childRoute.key, nextRouteState ? nextRouteState : childRoute);\n              return _extends({}, newState, {\n                isTransitioning: state.index !== newState.index ? action.immediate !== true : state.isTransitioning\n              });\n            }\n          }\n        }\n      }\n\n      // Handle push and navigate actions. This must happen after the focused\n      // child router has had a chance to handle the action.\n      if (behavesLikePushAction(action) && childRouters[action.routeName] !== undefined // undefined means it's not a childRouter or a screen\n      ) {\n          var _childRouter = childRouters[action.routeName];\n          var _route = void 0;\n\n          (0, _invariant2.default)(action.type !== _StackActions2.default.PUSH || action.key == null, 'StackRouter does not support key on the push action');\n\n          // Before pushing a new route we first try to find one in the existing route stack\n          // More information on this: https://github.com/react-navigation/rfcs/blob/master/text/0004-less-pushy-navigate.md\n          var lastRouteIndex = state.routes.findIndex(r => {\n            if (action.key) {\n              return r.key === action.key;\n            } else {\n              return r.routeName === action.routeName;\n            }\n          });\n\n          // An instance of this route exists already and we're dealing with a navigate action\n          if (action.type !== _StackActions2.default.PUSH && lastRouteIndex !== -1) {\n            // If index is unchanged and params are not being set, leave state identity intact\n            if (state.index === lastRouteIndex && !action.params) {\n              return null;\n            }\n\n            // Remove the now unused routes at the tail of the routes array\n            var routes = state.routes.slice(0, lastRouteIndex + 1);\n\n            // Apply params if provided, otherwise leave route identity intact\n            if (action.params) {\n              var _route2 = state.routes[lastRouteIndex];\n              routes[lastRouteIndex] = _extends({}, _route2, {\n                params: _extends({}, _route2.params, action.params)\n              });\n            }\n            // Return state with new index. Change isTransitioning only if index has changed\n            return _extends({}, state, {\n              isTransitioning: state.index !== lastRouteIndex ? action.immediate !== true : state.isTransitioning,\n              index: lastRouteIndex,\n              routes\n            });\n          }\n\n          if (_childRouter) {\n            // Delegate to the child router with the given action, or init it\n            var _childAction = action.action || _NavigationActions2.default.init({\n              params: getParamsForRouteAndAction(action.routeName, action)\n            });\n            _route = _extends({\n              params: getParamsForRouteAndAction(action.routeName, action)\n            }, _childRouter.getStateForAction(_childAction), {\n              routeName: action.routeName,\n              key: action.key || (0, _KeyGenerator.generateKey)()\n            });\n          } else {\n            // Create the route from scratch\n            _route = {\n              params: getParamsForRouteAndAction(action.routeName, action),\n              routeName: action.routeName,\n              key: action.key || (0, _KeyGenerator.generateKey)()\n            };\n          }\n          return _extends({}, _StateUtils2.default.push(state, _route), {\n            isTransitioning: action.immediate !== true\n          });\n        } else if (action.type === _StackActions2.default.PUSH && childRouters[action.routeName] === undefined) {\n        // Return the state identity to bubble the action up\n        return state;\n      }\n\n      // Handle navigation to other child routers that are not yet pushed\n      if (behavesLikePushAction(action)) {\n        var childRouterNames = Object.keys(childRouters);\n        for (var i = 0; i < childRouterNames.length; i++) {\n          var childRouterName = childRouterNames[i];\n          var _childRouter2 = childRouters[childRouterName];\n          if (_childRouter2) {\n            // For each child router, start with a blank state\n            var initChildRoute = _childRouter2.getStateForAction(_NavigationActions2.default.init());\n            // Then check to see if the router handles our navigate action\n            var navigatedChildRoute = _childRouter2.getStateForAction(action, initChildRoute);\n            var routeToPush = null;\n            if (navigatedChildRoute === null) {\n              // Push the route if the router has 'handled' the action and returned null\n              routeToPush = initChildRoute;\n            } else if (navigatedChildRoute !== initChildRoute) {\n              // Push the route if the state has changed in response to this navigation\n              routeToPush = navigatedChildRoute;\n            }\n            if (routeToPush) {\n              var _route3 = _extends({}, routeToPush, {\n                routeName: childRouterName,\n                key: action.key || (0, _KeyGenerator.generateKey)()\n              });\n              return _extends({}, _StateUtils2.default.push(state, _route3), {\n                isTransitioning: action.immediate !== true\n              });\n            }\n          }\n        }\n      }\n\n      // Handle pop-to-top behavior. Make sure this happens after children have had a chance to handle the action, so that the inner stack pops to top first.\n      if (action.type === _StackActions2.default.POP_TO_TOP) {\n        // Refuse to handle pop to top if a key is given that doesn't correspond\n        // to this router\n        if (action.key && state.key !== action.key) {\n          return state;\n        }\n\n        // If we're already at the top, then we return the state with a new\n        // identity so that the action is handled by this router.\n        if (state.index > 0) {\n          return _extends({}, state, {\n            isTransitioning: action.immediate !== true,\n            index: 0,\n            routes: [state.routes[0]]\n          });\n        }\n        return state;\n      }\n\n      // Handle replace action\n      if (action.type === _StackActions2.default.REPLACE) {\n        var routeIndex = void 0;\n\n        // If the key param is undefined, set the index to the last route in the stack\n        if (action.key === undefined && state.routes.length) {\n          routeIndex = state.routes.length - 1;\n        } else {\n          routeIndex = state.routes.findIndex(r => r.key === action.key);\n        }\n\n        // Only replace if the key matches one of our routes\n        if (routeIndex !== -1) {\n          var _childRouter3 = childRouters[action.routeName];\n          var childState = {};\n          if (_childRouter3) {\n            var _childAction2 = action.action || _NavigationActions2.default.init({\n              params: getParamsForRouteAndAction(action.routeName, action)\n            });\n            childState = _childRouter3.getStateForAction(_childAction2);\n          }\n          var _routes = [...state.routes];\n          _routes[routeIndex] = _extends({\n            params: getParamsForRouteAndAction(action.routeName, action)\n          }, childState, {\n            routeName: action.routeName,\n            key: action.newKey || (0, _KeyGenerator.generateKey)()\n          });\n          return _extends({}, state, { routes: _routes });\n        }\n      }\n\n      // Update transitioning state\n      if (action.type === _StackActions2.default.COMPLETE_TRANSITION && (action.key == null || action.key === state.key) && state.isTransitioning) {\n        return _extends({}, state, {\n          isTransitioning: false\n        });\n      }\n\n      if (action.type === _NavigationActions2.default.SET_PARAMS) {\n        var key = action.key;\n        var lastRoute = state.routes.find(route => route.key === key);\n        if (lastRoute) {\n          var params = _extends({}, lastRoute.params, action.params);\n          var _routes2 = [...state.routes];\n          _routes2[state.routes.indexOf(lastRoute)] = _extends({}, lastRoute, {\n            params\n          });\n          return _extends({}, state, {\n            routes: _routes2\n          });\n        }\n      }\n\n      if (action.type === _StackActions2.default.RESET) {\n        // Only handle reset actions that are unspecified or match this state key\n        if (action.key != null && action.key != state.key) {\n          // Deliberately use != instead of !== so we can match null with\n          // undefined on either the state or the action\n          return state;\n        }\n        var newStackActions = action.actions;\n\n        return _extends({}, state, {\n          routes: newStackActions.map(newStackAction => {\n            var router = childRouters[newStackAction.routeName];\n\n            var childState = {};\n\n            if (router) {\n              var _childAction3 = newStackAction.action || _NavigationActions2.default.init({\n                params: getParamsForRouteAndAction(newStackAction.routeName, newStackAction)\n              });\n\n              childState = router.getStateForAction(_childAction3);\n            }\n\n            return _extends({\n              params: getParamsForRouteAndAction(newStackAction.routeName, newStackAction)\n            }, childState, {\n              routeName: newStackAction.routeName,\n              key: newStackAction.key || (0, _KeyGenerator.generateKey)()\n            });\n          }),\n          index: action.index\n        });\n      }\n\n      if (action.type === _NavigationActions2.default.BACK || action.type === _StackActions2.default.POP) {\n        var { key: _key, n, immediate } = action;\n        var backRouteIndex = state.index;\n        if (action.type === _StackActions2.default.POP && n != null) {\n          // determine the index to go back *from*. In this case, n=1 means to go\n          // back from state.index, as if it were a normal \"BACK\" action\n          backRouteIndex = Math.max(1, state.index - n + 1);\n        } else if (_key) {\n          var backRoute = state.routes.find(route => route.key === _key);\n          backRouteIndex = state.routes.indexOf(backRoute);\n        }\n\n        if (backRouteIndex > 0) {\n          return _extends({}, state, {\n            routes: state.routes.slice(0, backRouteIndex),\n            index: backRouteIndex - 1,\n            isTransitioning: immediate !== true\n          });\n        }\n      }\n\n      // By this point in the router's state handling logic, we have handled the behavior of the active route, and handled any stack actions.\n      // If we haven't returned by now, we should allow non-active child routers to handle this action, and switch to that index if the child state (route) does change..\n\n      var keyIndex = action.key ? _StateUtils2.default.indexOf(state, action.key) : -1;\n\n      // Traverse routes from the top of the stack to the bottom, so the\n      // active route has the first opportunity, then the one before it, etc.\n      for (var _childRoute of state.routes.slice().reverse()) {\n        if (_childRoute.key === activeChildRoute.key) {\n          // skip over the active child because we let it attempt to handle the action earlier\n          continue;\n        }\n        // If a key is provided and in routes state then let's use that\n        // knowledge to skip extra getStateForAction calls on other child\n        // routers\n        if (keyIndex >= 0 && _childRoute.key !== action.key) {\n          continue;\n        }\n        var _childRouter4 = childRouters[_childRoute.routeName];\n        if (_childRouter4) {\n          var _route4 = _childRouter4.getStateForAction(action, _childRoute);\n\n          if (_route4 === null) {\n            return state;\n          } else if (_route4 && _route4 !== _childRoute) {\n            return _StateUtils2.default.replaceAt(state, _childRoute.key, _route4,\n            // the following tells replaceAt to NOT change the index to this route for the setParam action or complete transition action,\n            // because people don't expect these actions to switch the active route\n            action.type === _NavigationActions2.default.SET_PARAMS || action.type === _StackActions2.default.COMPLETE_TRANSITION);\n          }\n        }\n      }\n\n      return state;\n    },\n\n    getPathAndParamsForState(state) {\n      var route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n\n    getActionForPathAndParams(path, params) {\n      return getActionForPathAndParams(path, params);\n    },\n\n    getScreenOptions: (0, _createConfigGetter2.default)(routeConfigs, stackConfig.defaultNavigationOptions)\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}