{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ChannelBox(_ref) {\n  var avatar = _ref.avatar,\n    username = _ref.username,\n    channelName = _ref.channelName,\n    onPress = _ref.onPress,\n    containerStyle = _ref.containerStyle;\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isHovered = _React$useState2[0],\n    setIsHovered = _React$useState2[1];\n  return _jsx(TouchableOpacity, {\n    style: [styles.container, containerStyle, isHovered && {\n      backgroundColor: \"#E7DEDE\"\n    }],\n    onPress: onPress,\n    onMouseEnter: function onMouseEnter() {\n      return setIsHovered(true);\n    },\n    onMouseLeave: function onMouseLeave() {\n      return setIsHovered(false);\n    },\n    children: avatar ? _jsxs(View, {\n      style: styles.avatarContainer,\n      children: [_jsx(Image, {\n        source: {\n          uri: avatar\n        },\n        style: styles.avatar\n      }), _jsx(Text, {\n        style: styles.username,\n        children: username\n      })]\n    }) : _jsx(Text, {\n      style: styles.channelName,\n      children: channelName\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"#FFFFFF\",\n    borderRadius: 10,\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    marginVertical: 8\n  },\n  avatarContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\"\n  },\n  avatar: {\n    width: 32,\n    height: 32,\n    borderRadius: 16,\n    marginRight: 8\n  },\n  username: {\n    fontSize: 16,\n    fontWeight: \"bold\"\n  },\n  channelName: {\n    fontSize: 16\n  }\n});","map":{"version":3,"names":["React","View","StyleSheet","Text","TouchableOpacity","jsx","_jsx","jsxs","_jsxs","ChannelBox","_ref","avatar","username","channelName","onPress","containerStyle","_React$useState","useState","_React$useState2","_slicedToArray","isHovered","setIsHovered","style","styles","container","backgroundColor","onMouseEnter","onMouseLeave","children","avatarContainer","Image","source","uri","create","borderRadius","paddingVertical","paddingHorizontal","marginVertical","flexDirection","alignItems","width","height","marginRight","fontSize","fontWeight"],"sources":["C:/Users/ilias/OneDrive/Рабочий стол/messenger_project/Application/Client/components/searchBodies/searchBody.js"],"sourcesContent":["import React from \"react\";\r\nimport { View, StyleSheet, Text, TouchableOpacity } from \"react-native-web\";\r\n\r\nexport default function ChannelBox({ avatar, username, channelName, onPress, containerStyle }) {\r\n  const [isHovered, setIsHovered] = React.useState(false);\r\n\r\n  return (\r\n    <TouchableOpacity\r\n      style={[styles.container, containerStyle, isHovered && { backgroundColor: \"#E7DEDE\" }]}\r\n      onPress={onPress}\r\n      onMouseEnter={() => setIsHovered(true)}\r\n      onMouseLeave={() => setIsHovered(false)}\r\n    >\r\n      {avatar ? (\r\n        <View style={styles.avatarContainer}>\r\n          <Image source={{ uri: avatar }} style={styles.avatar} />\r\n          <Text style={styles.username}>{username}</Text>\r\n        </View>\r\n      ) : (\r\n        <Text style={styles.channelName}>{channelName}</Text>\r\n      )}\r\n    </TouchableOpacity>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    backgroundColor: \"#FFFFFF\",\r\n    borderRadius: 10,\r\n    paddingVertical: 12,\r\n    paddingHorizontal: 16,\r\n    marginVertical: 8,\r\n  },\r\n  avatarContainer: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    width: 32,\r\n    height: 32,\r\n    borderRadius: 16,\r\n    marginRight: 8,\r\n  },\r\n  username: {\r\n    fontSize: 16,\r\n    fontWeight: \"bold\",\r\n  },\r\n  channelName: {\r\n    fontSize: 16,\r\n  },\r\n});\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,gBAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAG1B,eAAe,SAASC,UAAUA,CAAAC,IAAA,EAA6D;EAAA,IAA1DC,MAAM,GAAAD,IAAA,CAANC,MAAM;IAAEC,QAAQ,GAAAF,IAAA,CAARE,QAAQ;IAAEC,WAAW,GAAAH,IAAA,CAAXG,WAAW;IAAEC,OAAO,GAAAJ,IAAA,CAAPI,OAAO;IAAEC,cAAc,GAAAL,IAAA,CAAdK,cAAc;EACzF,IAAAC,eAAA,GAAkChB,KAAK,CAACiB,QAAQ,CAAC,KAAK,CAAC;IAAAC,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IAAhDI,SAAS,GAAAF,gBAAA;IAAEG,YAAY,GAAAH,gBAAA;EAE9B,OACEZ,IAAA,CAACF,gBAAgB;IACfkB,KAAK,EAAE,CAACC,MAAM,CAACC,SAAS,EAAET,cAAc,EAAEK,SAAS,IAAI;MAAEK,eAAe,EAAE;IAAU,CAAC,CAAE;IACvFX,OAAO,EAAEA,OAAQ;IACjBY,YAAY,EAAE,SAAAA,aAAA;MAAA,OAAML,YAAY,CAAC,IAAI,CAAC;IAAA,CAAC;IACvCM,YAAY,EAAE,SAAAA,aAAA;MAAA,OAAMN,YAAY,CAAC,KAAK,CAAC;IAAA,CAAC;IAAAO,QAAA,EAEvCjB,MAAM,GACLH,KAAA,CAACP,IAAI;MAACqB,KAAK,EAAEC,MAAM,CAACM,eAAgB;MAAAD,QAAA,GAClCtB,IAAA,CAACwB,KAAK;QAACC,MAAM,EAAE;UAAEC,GAAG,EAAErB;QAAO,CAAE;QAACW,KAAK,EAAEC,MAAM,CAACZ;MAAO,CAAE,CAAC,EACxDL,IAAA,CAACH,IAAI;QAACmB,KAAK,EAAEC,MAAM,CAACX,QAAS;QAAAgB,QAAA,EAAEhB;MAAQ,CAAO,CAAC;IAAA,CAC3C,CAAC,GAEPN,IAAA,CAACH,IAAI;MAACmB,KAAK,EAAEC,MAAM,CAACV,WAAY;MAAAe,QAAA,EAAEf;IAAW,CAAO;EACrD,CACe,CAAC;AAEvB;AAEA,IAAMU,MAAM,GAAGrB,UAAU,CAAC+B,MAAM,CAAC;EAC/BT,SAAS,EAAE;IACTC,eAAe,EAAE,SAAS;IAC1BS,YAAY,EAAE,EAAE;IAChBC,eAAe,EAAE,EAAE;IACnBC,iBAAiB,EAAE,EAAE;IACrBC,cAAc,EAAE;EAClB,CAAC;EACDR,eAAe,EAAE;IACfS,aAAa,EAAE,KAAK;IACpBC,UAAU,EAAE;EACd,CAAC;EACD5B,MAAM,EAAE;IACN6B,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE,EAAE;IACVP,YAAY,EAAE,EAAE;IAChBQ,WAAW,EAAE;EACf,CAAC;EACD9B,QAAQ,EAAE;IACR+B,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE;EACd,CAAC;EACD/B,WAAW,EAAE;IACX8B,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}