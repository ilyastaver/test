{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/objectDestructuringEmpty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { useState, useContext, useEffect, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport CreateSvg from \"../assets/icons/createSvg\";\nimport useStyles from \"./styles/mainAuthScreen.module\";\nimport HeaderButton from \"../components/buttons/headerButton\";\nimport ShowAvatar from \"../components/Avatar/ShowAvatar/showAvatar\";\nimport BorderButton from \"../components/buttons/borderButton\";\nimport MessageBody from \"../components/messageBody/messageBody\";\nimport MessageInput from \"../components/inputs/messageInput/messageInput\";\nimport SettingsSvg from \"../assets/icons/settingsSvg\";\nimport { ImageContext } from \"../context/ImageContext\";\nimport AuthContext from \"../context/AuthContext\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport DataInput from \"../components/inputs/textInput/textInput\";\nimport { useFocusEffect } from '@react-navigation/native';\nimport { setProfileNickname, getProfileNickname } from \"../context/AsyncStorageUtil\";\nimport axios from 'axios';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ChannelScreen(_ref) {\n  var _channelData$messages2;\n  var navigation = _ref.navigation,\n    route = _ref.route;\n  var styles = useStyles();\n  var channelId = route.params.channelId;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    showPopup = _useState2[0],\n    setShowPopup = _useState2[1];\n  var _useState3 = useState('Admin'),\n    _useState4 = _slicedToArray(_useState3, 2),\n    role = _useState4[0],\n    setRole = _useState4[1];\n  var _useState5 = useState({\n      nickname: ''\n    }),\n    _useState6 = _slicedToArray(_useState5, 2),\n    inputText = _useState6[0],\n    setInputText = _useState6[1];\n  var _useContext = useContext(AuthContext),\n    logout = _useContext.logout;\n  var _useContext2 = useContext(AuthContext),\n    user = _useContext2.user,\n    updateUser = _useContext2.updateUser;\n  var _useState7 = useState([]),\n    _useState8 = _slicedToArray(_useState7, 2),\n    messages = _useState8[0],\n    setMessages = _useState8[1];\n  var _useContext3 = useContext(ImageContext),\n    selectedImage = _useContext3.selectedImage;\n  var _useState9 = useState(false),\n    _useState10 = _slicedToArray(_useState9, 2),\n    isMember = _useState10[0],\n    setIsMember = _useState10[1];\n  var _useState11 = useState(false),\n    _useState12 = _slicedToArray(_useState11, 2),\n    isDisable = _useState12[0],\n    setIsDisable = _useState12[1];\n  var _useState13 = useState(false),\n    _useState14 = _slicedToArray(_useState13, 2),\n    isAdmin = _useState14[0],\n    setIsAdmin = _useState14[1];\n  var _useState15 = useState(true),\n    _useState16 = _slicedToArray(_useState15, 2),\n    showSettings = _useState16[0],\n    setShowSettings = _useState16[1];\n  var _useState17 = useState(''),\n    _useState18 = _slicedToArray(_useState17, 2),\n    userText = _useState18[0],\n    setUserText = _useState18[1];\n  var username = 'admin';\n  var password = 'root';\n  var _useState19 = useState([]),\n    _useState20 = _slicedToArray(_useState19, 2),\n    channelData = _useState20[0],\n    setChannelData = _useState20[1];\n  var _useState21 = useState(false),\n    _useState22 = _slicedToArray(_useState21, 2),\n    shouldUseFocusEffect = _useState22[0],\n    setShouldUseFocusEffect = _useState22[1];\n  useEffect(function () {\n    setShouldUseFocusEffect(false);\n  }, [channelData.messages]);\n  useFocusEffect(React.useCallback(function () {\n    fetchProfileNickname();\n    fetchChannelData();\n  }, [channelData.messages]));\n  var scrollViewRef = useRef(null);\n  var _useState23 = useState(true),\n    _useState24 = _slicedToArray(_useState23, 2),\n    isAtBottom = _useState24[0],\n    setIsAtBottom = _useState24[1];\n  useEffect(function () {\n    var _channelData$messages;\n    if ((channelData == null ? void 0 : (_channelData$messages = channelData.messages) == null ? void 0 : _channelData$messages.length) > 0 && isAtBottom) {\n      scrollViewRef.current.scrollToEnd({\n        animated: true\n      });\n    }\n  }, [channelData == null ? void 0 : channelData.messages, isAtBottom]);\n  var handleContentSizeChange = function handleContentSizeChange(contentWidth, contentHeight) {\n    var isScrolledToBottom = scrollViewRef.current && scrollViewRef.current.contentOffset.y + scrollViewRef.current.layoutMeasurement.height >= contentHeight - 20;\n    setIsAtBottom(isScrolledToBottom);\n  };\n  var handleLayout = function handleLayout() {\n    scrollViewRef.current.scrollToEnd({\n      animated: true\n    });\n  };\n  var fetchProfileNickname = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var nickname = yield getProfileNickname();\n        if (nickname && nickname !== userText) {\n          setUserText(nickname);\n        }\n      } catch (error) {\n        console.log('Error retrieving profile nickname:', error);\n      }\n    });\n    return function fetchProfileNickname() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    loadChatMessages();\n    console.log(channelId);\n  }, []);\n  useEffect(function () {\n    saveChatMessages();\n  }, [messages]);\n  useEffect(function () {\n    saveChannelState();\n  }, [isMember, showSettings]);\n  var isFormValid = inputText.nickname;\n  var buttons = [{\n    onPress: function onPress(_ref3) {\n      _objectDestructuringEmpty(_ref3);\n      return navigation.navigate('Profile');\n    },\n    text: 'Мой аккаунт'\n  }, {\n    onPress: function onPress() {\n      return logout();\n    },\n    text: 'Выйти'\n  }];\n  var messageBodies = [{\n    imageUrl: 'https://i.ibb.co/6NC7Pms/photo-2023-05-05-23-08-50.jpg',\n    nickname: 'John Doe',\n    role: 'Avatar',\n    channel: true,\n    message: 'Hellffffffffffffffffffffffffffffffffffffffffffffffffffffffffo world!'\n  }, {\n    own: true,\n    nickname: 'John Doe',\n    role: 'Amon',\n    channel: true,\n    message: 'Hellffffffffffffffffffffffffffffffffffffffffffffffffffffffffo world!'\n  }];\n  var handleJoinLeave = function () {\n    var _ref4 = _asyncToGenerator(function* () {\n      try {\n        var name = userText || user.name;\n        var channelName = channelData.name;\n        var apiUrl = isMember ? \"http://localhost:8080/api/channels/\" + channelId + \"/leave?username=\" + name : \"http://localhost:8080/api/channels/join?username=\" + username + \"&channel_name=\" + channelName;\n        var response = yield fetch(apiUrl, {\n          method: isMember ? 'DELETE' : 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': \"Basic \" + btoa(username + \":\" + password)\n          }\n        });\n        if (response.ok) {\n          setIsMember(function (prevIsMember) {\n            return !prevIsMember;\n          });\n          alert(isMember ? 'You left the channel' : 'You joined the channel');\n          window.location.reload();\n        } else {\n          alert(isMember ? 'Failed to leave the channel' : 'Failed to join the channel');\n        }\n      } catch (error) {\n        alert('Error joining/leaving the channel:', error);\n      }\n    });\n    return function handleJoinLeave() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var saveChannelState = function () {\n    var _ref5 = _asyncToGenerator(function* () {\n      try {\n        var channelState = {\n          isMember: isMember,\n          showSettings: showSettings\n        };\n        yield AsyncStorage.setItem('channelState', JSON.stringify(channelState));\n      } catch (error) {\n        console.error('Error while saving channel state:', error);\n      }\n    });\n    return function saveChannelState() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  var saveChatMessages = function () {\n    var _ref6 = _asyncToGenerator(function* () {\n      try {\n        yield AsyncStorage.setItem('chatMessages', JSON.stringify(messages));\n      } catch (error) {\n        console.error('Error while saving chat messages:', error);\n      }\n    });\n    return function saveChatMessages() {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  var imageSource = selectedImage || user && user.image;\n  var loadChatMessages = function () {\n    var _ref7 = _asyncToGenerator(function* () {\n      try {\n        var savedMessages = yield AsyncStorage.getItem('chatMessages');\n        if (savedMessages) {\n          setMessages(JSON.parse(savedMessages));\n        }\n      } catch (error) {\n        console.error('Error while loading chat messages:', error);\n      }\n    });\n    return function loadChatMessages() {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n  var handleCreateChannel = function () {\n    var _ref8 = _asyncToGenerator(function* () {\n      try {\n        var response = yield fetch('http://localhost:8080/api/channels/create', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': \"Basic \" + btoa(username + \":\" + password)\n          },\n          body: JSON.stringify({\n            username: userText,\n            channelName: inputText.nickname\n          })\n        });\n        if (response.ok) {\n          var channelResponse = yield response.json();\n          setShowPopup(false);\n          alert('Channel created');\n          var updatedUser = _objectSpread(_objectSpread({}, user), {}, {\n            channels: [].concat(_toConsumableArray(user.channels), [channelResponse])\n          });\n          localStorage.setItem('user', JSON.stringify(updatedUser));\n          updateUser(updatedUser);\n        } else {\n          alert('Failed to create channel');\n        }\n      } catch (error) {\n        alert('Error creating channel:', error);\n      }\n    });\n    return function handleCreateChannel() {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n  var fetchChannelData = function () {\n    var _ref9 = _asyncToGenerator(function* () {\n      try {\n        var response = yield fetch(\"http://localhost:8080/api/channels/\" + channelId, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': \"Basic \" + btoa(username + \":\" + password)\n          }\n        });\n        if (response.ok) {\n          var _channelData$creator, _user$channels;\n          var _channelData = yield response.json();\n          var isCreator = (user == null ? void 0 : user.id) === ((_channelData$creator = _channelData.creator) == null ? void 0 : _channelData$creator.id);\n          var member = (_user$channels = user.channels) == null ? void 0 : _user$channels.some(function (channel) {\n            return channel.id === _channelData.id;\n          });\n          var currentUser = _channelData.members.find(function (member) {\n            return member.user.id === user.id;\n          });\n          if (currentUser) {\n            var _role = currentUser.role;\n            if (_role) {\n              if (_role.isAdmin !== undefined) {\n                setIsAdmin(_role.isAdmin);\n              }\n            }\n          } else {\n            console.log(\"Current user not found in the members list\");\n          }\n          setIsMember(member);\n          setIsDisable(isCreator);\n          setChannelData(_channelData);\n        } else {\n          console.log('Failed to fetch channel data');\n        }\n      } catch (error) {\n        console.log('Error fetching channel data:', error);\n      }\n    });\n    return function fetchChannelData() {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.containerMain,\n    children: [_jsxs(View, {\n      style: styles.barChanContainer,\n      children: [_jsx(Text, {\n        style: styles.barText,\n        children: channelData.name\n      }), _jsx(View, {\n        children: _jsx(HeaderButton, {\n          title: isMember ? 'Покинуть' : 'Присоединиться',\n          onPress: handleJoinLeave,\n          disabled: isDisable\n        })\n      }), isMember && isAdmin && _jsx(View, {\n        style: {\n          marginRight: 20\n        },\n        children: _jsx(TouchableHighlight, {\n          onPress: function onPress(_ref10) {\n            _objectDestructuringEmpty(_ref10);\n            return navigation.navigate('Settings', {\n              channelId: channelData.id\n            });\n          },\n          children: _jsx(SettingsSvg, {})\n        })\n      })]\n    }), _jsxs(View, {\n      style: styles.profileContainer,\n      children: [_jsx(ShowAvatar, {\n        imageUrl: imageSource,\n        profile: true\n      }), _jsx(Text, {\n        style: {\n          color: '#000000',\n          fontSize: 48,\n          textAlign: 'center',\n          marginBottom: 13,\n          fontFamily: 'Montserrat-Regular'\n        },\n        children: userText ? userText : user.name\n      }), buttons.map(function (data, index) {\n        return _jsx(View, {\n          style: {\n            width: '70%'\n          },\n          children: _jsx(BorderButton, {\n            data: data\n          }, index)\n        }, index);\n      })]\n    }), _jsx(View, {\n      style: styles.historyContainer,\n      children: _jsx(ScrollView, {\n        ref: scrollViewRef,\n        style: {\n          flex: 1,\n          scrollbarWidth: 0,\n          flexDirection: 'column'\n        },\n        children: channelData == null ? void 0 : (_channelData$messages2 = channelData.messages) == null ? void 0 : _channelData$messages2.map(function (message) {\n          var _message$sender, _message$sender2, _channelData$members$, _message$sender3;\n          return _jsx(MessageBody, {\n            data: {\n              imageUrl: (_message$sender = message.sender) == null ? void 0 : _message$sender.image,\n              nickname: (_message$sender2 = message.sender) == null ? void 0 : _message$sender2.name,\n              role: (_channelData$members$ = channelData.members.role) == null ? void 0 : _channelData$members$.name,\n              message: message.data,\n              date: message.date,\n              own: ((_message$sender3 = message.sender) == null ? void 0 : _message$sender3.name) === user.name,\n              channel: true\n            },\n            currentUser: user\n          }, message.id);\n        })\n      })\n    }), isMember && _jsx(View, {\n      style: styles.sendContainer,\n      children: _jsx(MessageInput, {\n        curuser: userText ? userText : user.name,\n        chanInf: channelData\n      })\n    }), _jsx(View, {\n      style: styles.bottomLeft,\n      children: _jsx(TouchableHighlight, {\n        onPress: function onPress() {\n          return setShowPopup(true);\n        },\n        children: _jsx(CreateSvg, {})\n      })\n    }), _jsx(Modal, {\n      visible: showPopup,\n      transparent: true,\n      children: _jsxs(View, {\n        style: styles.popupContainer,\n        children: [_jsx(Text, {\n          style: styles.text,\n          children: \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u043A\\u0430\\u043D\\u0430\\u043B\\u0430\"\n        }), _jsx(View, {\n          style: {\n            marginBottom: 13,\n            alignItems: 'center'\n          },\n          children: _jsx(DataInput, {\n            value: inputText.nickname,\n            setValue: function setValue(text) {\n              return setInputText(_objectSpread(_objectSpread({}, inputText), {}, {\n                nickname: text\n              }));\n            },\n            placeholder: '',\n            type: 'nickname',\n            flex: true\n          })\n        }), _jsx(View, {\n          children: _jsx(HeaderButton, {\n            title: \"Создать\",\n            onPress: handleCreateChannel,\n            disabled: !isFormValid\n          })\n        })]\n      })\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","useContext","useEffect","useRef","View","Text","TouchableHighlight","Modal","TouchableOpacity","ScrollView","CreateSvg","useStyles","HeaderButton","ShowAvatar","BorderButton","MessageBody","MessageInput","SettingsSvg","ImageContext","AuthContext","AsyncStorage","DataInput","useFocusEffect","setProfileNickname","getProfileNickname","axios","jsx","_jsx","jsxs","_jsxs","ChannelScreen","_ref","_channelData$messages2","navigation","route","styles","channelId","params","_useState","_useState2","_slicedToArray","showPopup","setShowPopup","_useState3","_useState4","role","setRole","_useState5","nickname","_useState6","inputText","setInputText","_useContext","logout","_useContext2","user","updateUser","_useState7","_useState8","messages","setMessages","_useContext3","selectedImage","_useState9","_useState10","isMember","setIsMember","_useState11","_useState12","isDisable","setIsDisable","_useState13","_useState14","isAdmin","setIsAdmin","_useState15","_useState16","showSettings","setShowSettings","_useState17","_useState18","userText","setUserText","username","password","_useState19","_useState20","channelData","setChannelData","_useState21","_useState22","shouldUseFocusEffect","setShouldUseFocusEffect","useCallback","fetchProfileNickname","fetchChannelData","scrollViewRef","_useState23","_useState24","isAtBottom","setIsAtBottom","_channelData$messages","length","current","scrollToEnd","animated","handleContentSizeChange","contentWidth","contentHeight","isScrolledToBottom","contentOffset","y","layoutMeasurement","height","handleLayout","_ref2","_asyncToGenerator","error","console","log","apply","arguments","loadChatMessages","saveChatMessages","saveChannelState","isFormValid","buttons","onPress","_ref3","_objectDestructuringEmpty","navigate","text","messageBodies","imageUrl","channel","message","own","handleJoinLeave","_ref4","name","channelName","apiUrl","response","fetch","method","headers","btoa","ok","prevIsMember","alert","window","location","reload","_ref5","channelState","setItem","JSON","stringify","_ref6","imageSource","image","_ref7","savedMessages","getItem","parse","handleCreateChannel","_ref8","body","channelResponse","json","updatedUser","_objectSpread","channels","concat","_toConsumableArray","localStorage","_ref9","_channelData$creator","_user$channels","isCreator","id","creator","member","some","currentUser","members","find","undefined","style","containerMain","children","barChanContainer","barText","title","disabled","marginRight","_ref10","profileContainer","profile","color","fontSize","textAlign","marginBottom","fontFamily","map","data","index","width","historyContainer","ref","flex","scrollbarWidth","flexDirection","_message$sender","_message$sender2","_channelData$members$","_message$sender3","sender","date","sendContainer","curuser","chanInf","bottomLeft","visible","transparent","popupContainer","alignItems","value","setValue","placeholder","type"],"sources":["C:/Users/ilias/OneDrive/Рабочий стол/messenger_project/Application/Client/screens/ChannelScreen.js"],"sourcesContent":["import React, { useState, useContext, useEffect, useRef } from 'react';\r\nimport { View, Text, TouchableHighlight, Modal, TouchableOpacity, ScrollView } from 'react-native';\r\nimport CreateSvg from '../assets/icons/createSvg';\r\nimport useStyles from './styles/mainAuthScreen.module';\r\nimport HeaderButton from '../components/buttons/headerButton';\r\nimport ShowAvatar from '../components/Avatar/ShowAvatar/showAvatar';\r\nimport BorderButton from '../components/buttons/borderButton';\r\nimport MessageBody from '../components/messageBody/messageBody';\r\nimport MessageInput from '../components/inputs/messageInput/messageInput';\r\nimport SettingsSvg from '../assets/icons/settingsSvg';\r\nimport { ImageContext } from '../context/ImageContext';\r\nimport AuthContext from '../context/AuthContext';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport DataInput from '../components/inputs/textInput/textInput';\r\nimport { useFocusEffect } from '@react-navigation/native';\r\nimport { setProfileNickname, getProfileNickname } from '../context/AsyncStorageUtil';\r\nimport axios from 'axios';\r\n\r\nexport default function ChannelScreen({ navigation, route }) {\r\n    const styles = useStyles();\r\n    const { channelId } = route.params;\r\n    const [showPopup, setShowPopup] = useState(false);\r\n    const [role, setRole] = useState('Admin');\r\n    const [inputText, setInputText] = useState({\r\n        nickname: '',\r\n    });\r\n    const { logout } = useContext(AuthContext);\r\n    const { user, updateUser } = useContext(AuthContext);\r\n    const [messages, setMessages] = useState([]);\r\n    const { selectedImage } = useContext(ImageContext);\r\n    const [isMember, setIsMember] = useState(false);\r\n    const [isDisable, setIsDisable] = useState(false);\r\n    const [isAdmin, setIsAdmin] = useState(false);\r\n    const [showSettings, setShowSettings] = useState(true);\r\n    const [userText, setUserText] = useState('');\r\n    const username = 'admin';\r\n    const password = 'root';\r\n    const [channelData, setChannelData] = useState([]);\r\n    const [shouldUseFocusEffect, setShouldUseFocusEffect] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setShouldUseFocusEffect(false); // Reset the flag\r\n    }, [channelData.messages]);\r\n    useFocusEffect(\r\n        React.useCallback(() => {\r\n            fetchProfileNickname();\r\n            fetchChannelData();\r\n        }, [channelData.messages])\r\n    );\r\n\r\n    const scrollViewRef = useRef(null);\r\n    const [isAtBottom, setIsAtBottom] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (channelData?.messages?.length > 0 && isAtBottom) {\r\n            scrollViewRef.current.scrollToEnd({ animated: true });\r\n        }\r\n    }, [channelData?.messages, isAtBottom]);\r\n\r\n    const handleContentSizeChange = (contentWidth, contentHeight) => {\r\n        const isScrolledToBottom =\r\n            scrollViewRef.current &&\r\n            scrollViewRef.current.contentOffset.y + scrollViewRef.current.layoutMeasurement.height >=\r\n            contentHeight - 20; // Adjust this value if needed\r\n\r\n        setIsAtBottom(isScrolledToBottom);\r\n    };\r\n\r\n    const handleLayout = () => {\r\n        scrollViewRef.current.scrollToEnd({ animated: true });\r\n    };\r\n\r\n    const fetchProfileNickname = async () => {\r\n        try {\r\n            const nickname = await getProfileNickname();\r\n            if (nickname && nickname !== userText) {\r\n                setUserText(nickname);\r\n            }\r\n        } catch (error) {\r\n            console.log('Error retrieving profile nickname:', error);\r\n        }\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        loadChatMessages();\r\n        console.log(channelId);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        saveChatMessages();\r\n    }, [messages]);\r\n\r\n    useEffect(() => {\r\n        saveChannelState();\r\n    }, [isMember, showSettings]);\r\n\r\n\r\n\r\n    const isFormValid = inputText.nickname;\r\n    const buttons = [\r\n        {\r\n            onPress: ({ }) => navigation.navigate('Profile'),\r\n            text: 'Мой аккаунт',\r\n        },\r\n        {\r\n            onPress: () => logout(),\r\n            text: 'Выйти',\r\n        },\r\n    ];\r\n\r\n    const messageBodies = [\r\n        {\r\n            imageUrl: 'https://i.ibb.co/6NC7Pms/photo-2023-05-05-23-08-50.jpg',\r\n            nickname: 'John Doe',\r\n            role: 'Avatar',\r\n            channel: true,\r\n            message: 'Hellffffffffffffffffffffffffffffffffffffffffffffffffffffffffo world!',\r\n        },\r\n        {\r\n            own: true,\r\n            nickname: 'John Doe',\r\n            role: 'Amon',\r\n            channel: true,\r\n            message: 'Hellffffffffffffffffffffffffffffffffffffffffffffffffffffffffo world!',\r\n        },\r\n    ];\r\n\r\n    const handleJoinLeave = async () => {\r\n        try {\r\n            const name = userText || user.name;\r\n            const channelName = channelData.name;\r\n            const apiUrl = isMember\r\n                ? `http://localhost:8080/api/channels/${channelId}/leave?username=${name}`\r\n                : `http://localhost:8080/api/channels/join?username=${username}&channel_name=${channelName}`;\r\n\r\n            const response = await fetch(apiUrl, {\r\n                method: isMember ? 'DELETE' : 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Basic ${btoa(`${username}:${password}`)}`,\r\n                },\r\n            });\r\n\r\n            if (response.ok) {\r\n                setIsMember((prevIsMember) => !prevIsMember);\r\n                alert(isMember ? 'You left the channel' : 'You joined the channel');\r\n                window.location.reload();\r\n            } else {\r\n                // Handle error response\r\n                alert(isMember ? 'Failed to leave the channel' : 'Failed to join the channel');\r\n            }\r\n        } catch (error) {\r\n            alert('Error joining/leaving the channel:', error);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    const saveChannelState = async () => {\r\n        try {\r\n            const channelState = {\r\n                isMember,\r\n                showSettings,\r\n            };\r\n            await AsyncStorage.setItem('channelState', JSON.stringify(channelState));\r\n        } catch (error) {\r\n            console.error('Error while saving channel state:', error);\r\n        }\r\n    };\r\n\r\n\r\n    const saveChatMessages = async () => {\r\n        try {\r\n            await AsyncStorage.setItem('chatMessages', JSON.stringify(messages));\r\n        } catch (error) {\r\n            console.error('Error while saving chat messages:', error);\r\n        }\r\n    };\r\n    const imageSource = selectedImage || (user && user.image);\r\n    const loadChatMessages = async () => {\r\n        try {\r\n            const savedMessages = await AsyncStorage.getItem('chatMessages');\r\n            if (savedMessages) {\r\n                setMessages(JSON.parse(savedMessages));\r\n            }\r\n        } catch (error) {\r\n            console.error('Error while loading chat messages:', error);\r\n        }\r\n    };\r\n    const handleCreateChannel = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:8080/api/channels/create', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Basic ${btoa(`${username}:${password}`)}`,\r\n                },\r\n                body: JSON.stringify({\r\n                    username: userText,\r\n                    channelName: inputText.nickname,\r\n                }),\r\n            });\r\n\r\n            if (response.ok) {\r\n                const channelResponse = await response.json();\r\n                setShowPopup(false);\r\n                // Channel creation successful\r\n                alert('Channel created');\r\n\r\n                // Update user.channels in the AuthContext\r\n                const updatedUser = {\r\n                    ...user,\r\n                    channels: [...user.channels, channelResponse],\r\n                };\r\n\r\n                // Store the updated user data in localStorage\r\n                localStorage.setItem('user', JSON.stringify(updatedUser));\r\n\r\n                // Update user data in the AuthContext\r\n                updateUser(updatedUser);\r\n            } else {\r\n                // Handle error response\r\n                alert('Failed to create channel');\r\n            }\r\n        } catch (error) {\r\n            alert('Error creating channel:', error);\r\n        }\r\n    };\r\n\r\n    const fetchChannelData = async () => {\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/api/channels/${channelId}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Basic ${btoa(`${username}:${password}`)}`,\r\n                },\r\n            });\r\n\r\n            if (response.ok) {\r\n                const channelData = await response.json();\r\n\r\n                // Check if the user is the channel creator\r\n                const isCreator = user?.id === channelData.creator?.id;\r\n                const member = user.channels?.some((channel) => channel.id === channelData.id);\r\n                const currentUser = channelData.members.find(member => member.user.id === user.id);\r\n\r\n                if (currentUser) {\r\n                    // Access the role object of the current user\r\n                    const { role } = currentUser;\r\n\r\n                    if (role) {\r\n                        // User has a role, handle it accordingly\r\n\r\n\r\n                        if (role.isAdmin !== undefined) {\r\n                            // User has an isAdmin property\r\n\r\n                            setIsAdmin(role.isAdmin);\r\n                        }\r\n                    }\r\n                } else {\r\n                    console.log(\"Current user not found in the members list\");\r\n                }\r\n                // Update isMember and showSettings based on the condition\r\n                setIsMember(member);\r\n\r\n                setIsDisable(isCreator);\r\n                setChannelData(channelData);\r\n            } else {\r\n                // Handle error response\r\n                console.log('Failed to fetch channel data');\r\n            }\r\n        } catch (error) {\r\n            console.log('Error fetching channel data:', error);\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <View style={styles.containerMain}>\r\n            <View style={styles.barChanContainer}>\r\n                <Text style={styles.barText}>{channelData.name}</Text>\r\n                <View>\r\n                    <HeaderButton title={isMember ? 'Покинуть' : 'Присоединиться'} onPress={handleJoinLeave} disabled={isDisable} />\r\n                </View>\r\n                {isMember && isAdmin && (\r\n                    <View style={{ marginRight: 20 }}>\r\n                        <TouchableHighlight onPress={({ }) => navigation.navigate('Settings', { channelId: channelData.id })}>\r\n                            <SettingsSvg />\r\n                        </TouchableHighlight>\r\n                    </View>\r\n                )}\r\n            </View>\r\n            <View style={styles.profileContainer}>\r\n                <ShowAvatar imageUrl={imageSource} profile={true} />\r\n                <Text style={{ color: '#000000', fontSize: 48, textAlign: 'center', marginBottom: 13, fontFamily: 'Montserrat-Regular', }}>{userText ? userText : user.name}</Text>\r\n                {buttons.map((data, index) => (\r\n                    <View style={{ width: '70%' }} key={index}>\r\n                        <BorderButton key={index} data={data} />\r\n                    </View>\r\n                ))}\r\n            </View>\r\n            <View style={styles.historyContainer}>\r\n                <ScrollView ref={scrollViewRef} style={{ flex: 1, scrollbarWidth: 0, flexDirection: 'column' }}>\r\n                    {channelData?.messages?.map((message) => (\r\n                        <MessageBody\r\n                            key={message.id}\r\n                            data={{\r\n                                imageUrl: message.sender?.image, // Add a null check for message.author\r\n                                nickname: message.sender?.name, // Add a null check for message.author\r\n                                role: channelData.members.role?.name, // Add null checks for message.author and message.author.role\r\n                                message: message.data,\r\n                                date: message.date,\r\n                                own: message.sender?.name === user.name, // Add a null check for message.author\r\n                                channel: true,\r\n                            }}\r\n                            currentUser={user}\r\n                        />\r\n                    ))}\r\n\r\n                </ScrollView>\r\n            </View>\r\n            {isMember && (\r\n                <View style={styles.sendContainer}>\r\n                    <MessageInput curuser={userText ? userText : user.name} chanInf={channelData} />\r\n                </View>\r\n            )}\r\n            <View style={styles.bottomLeft}>\r\n                <TouchableHighlight onPress={() => setShowPopup(true)}>\r\n                    <CreateSvg />\r\n                </TouchableHighlight>\r\n            </View>\r\n            <Modal visible={showPopup} transparent={true}>\r\n                <View style={styles.popupContainer}>\r\n                    <Text style={styles.text}>Название канала</Text>\r\n                    <View style={{ marginBottom: 13, alignItems: 'center' }}>\r\n                        <DataInput\r\n                            value={inputText.nickname}\r\n                            setValue={(text) => setInputText({ ...inputText, nickname: text })}\r\n                            placeholder={''}\r\n                            type={'nickname'}\r\n                            flex={true}\r\n                        />\r\n                    </View>\r\n                    <View>\r\n                        <HeaderButton title={\"Создать\"} onPress={handleCreateChannel} disabled={!isFormValid} />\r\n                    </View>\r\n                </View>\r\n            </Modal>\r\n        </View>\r\n    );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}