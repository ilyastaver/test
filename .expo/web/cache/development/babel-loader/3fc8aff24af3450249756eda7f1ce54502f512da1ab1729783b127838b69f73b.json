{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/objectDestructuringEmpty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { useState, useContext, useEffect, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport CreateSvg from \"../assets/icons/createSvg\";\nimport useStyles from \"./styles/mainAuthScreen.module\";\nimport HeaderButton from \"../components/buttons/headerButton\";\nimport ShowAvatar from \"../components/Avatar/ShowAvatar/showAvatar\";\nimport BorderButton from \"../components/buttons/borderButton\";\nimport MessageBody from \"../components/messageBody/messageBody\";\nimport MessageInput from \"../components/inputs/messageInput/messageInput\";\nimport SettingsSvg from \"../assets/icons/settingsSvg\";\nimport { ImageContext } from \"../context/ImageContext\";\nimport AuthContext from \"../context/AuthContext\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport DataInput from \"../components/inputs/textInput/textInput\";\nimport { useFocusEffect } from '@react-navigation/native';\nimport { setProfileNickname, getProfileNickname } from \"../context/AsyncStorageUtil\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ChannelScreen(_ref) {\n  var _channelData$messages2;\n  var navigation = _ref.navigation,\n    route = _ref.route;\n  var styles = useStyles();\n  var channelId = route.params.channelId;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    showPopup = _useState2[0],\n    setShowPopup = _useState2[1];\n  var _useState3 = useState('Admin'),\n    _useState4 = _slicedToArray(_useState3, 2),\n    role = _useState4[0],\n    setRole = _useState4[1];\n  var _useState5 = useState({\n      nickname: ''\n    }),\n    _useState6 = _slicedToArray(_useState5, 2),\n    inputText = _useState6[0],\n    setInputText = _useState6[1];\n  var _useContext = useContext(AuthContext),\n    logout = _useContext.logout;\n  var _useContext2 = useContext(AuthContext),\n    user = _useContext2.user,\n    updateUser = _useContext2.updateUser;\n  var _useState7 = useState([]),\n    _useState8 = _slicedToArray(_useState7, 2),\n    messages = _useState8[0],\n    setMessages = _useState8[1];\n  var _useContext3 = useContext(ImageContext),\n    selectedImage = _useContext3.selectedImage;\n  var _useState9 = useState(false),\n    _useState10 = _slicedToArray(_useState9, 2),\n    isMember = _useState10[0],\n    setIsMember = _useState10[1];\n  var _useState11 = useState(false),\n    _useState12 = _slicedToArray(_useState11, 2),\n    isDisable = _useState12[0],\n    setIsDisable = _useState12[1];\n  var _useState13 = useState(false),\n    _useState14 = _slicedToArray(_useState13, 2),\n    isAdmin = _useState14[0],\n    setIsAdmin = _useState14[1];\n  var _useState15 = useState(true),\n    _useState16 = _slicedToArray(_useState15, 2),\n    showSettings = _useState16[0],\n    setShowSettings = _useState16[1];\n  var _useState17 = useState(''),\n    _useState18 = _slicedToArray(_useState17, 2),\n    userText = _useState18[0],\n    setUserText = _useState18[1];\n  var username = 'admin';\n  var password = 'root';\n  var _useState19 = useState([]),\n    _useState20 = _slicedToArray(_useState19, 2),\n    channelData = _useState20[0],\n    setChannelData = _useState20[1];\n  var _useState21 = useState(false),\n    _useState22 = _slicedToArray(_useState21, 2),\n    shouldUseFocusEffect = _useState22[0],\n    setShouldUseFocusEffect = _useState22[1];\n  var _useState23 = useState(true),\n    _useState24 = _slicedToArray(_useState23, 2),\n    shouldFetchChannelData = _useState24[0],\n    setShouldFetchChannelData = _useState24[1];\n  useEffect(function () {\n    if (shouldFetchChannelData) {\n      fetchChannelData().then(function () {\n        return setShouldFetchChannelData(false);\n      }).catch(function (error) {\n        return console.log('Error fetching channel data:', error);\n      });\n    }\n  }, [shouldFetchChannelData]);\n  var fetchChannelData = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var response = yield fetch(\"http://localhost:8080/api/channels/\" + channelId, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': \"Basic \" + btoa(username + \":\" + password)\n          }\n        });\n        if (response.ok) {\n          var _channelData = yield response.json();\n          setChannelData(_channelData);\n        } else {\n          throw new Error('Failed to fetch channel data');\n        }\n      } catch (error) {\n        throw new Error('Error fetching channel data:', error);\n      }\n    });\n    return function fetchChannelData() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  useFocusEffect(React.useCallback(function () {\n    fetchProfileNickname();\n    setShouldFetchChannelData(true);\n  }, []));\n  useEffect(function () {\n    setShouldFetchChannelData(true);\n  }, [channelData.messages]);\n  var scrollViewRef = useRef(null);\n  var _useState25 = useState(true),\n    _useState26 = _slicedToArray(_useState25, 2),\n    isAtBottom = _useState26[0],\n    setIsAtBottom = _useState26[1];\n  useEffect(function () {\n    var _channelData$messages;\n    if ((channelData == null ? void 0 : (_channelData$messages = channelData.messages) == null ? void 0 : _channelData$messages.length) > 0 && isAtBottom) {\n      scrollViewRef.current.scrollToEnd({\n        animated: true\n      });\n    }\n  }, [channelData == null ? void 0 : channelData.messages, isAtBottom]);\n  var handleContentSizeChange = function handleContentSizeChange() {\n    var isScrolledToBottom = scrollViewRef.current && scrollViewRef.current.contentOffset && scrollViewRef.current.contentOffset.y + scrollViewRef.current.layoutMeasurement.height >= scrollViewRef.current.contentSize.height;\n    setIsAtBottom(isScrolledToBottom);\n  };\n  var fetchProfileNickname = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      try {\n        var nickname = yield getProfileNickname();\n        if (nickname && nickname !== userText) {\n          setUserText(nickname);\n        }\n      } catch (error) {\n        console.log('Error retrieving profile nickname:', error);\n      }\n    });\n    return function fetchProfileNickname() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    loadChatMessages();\n    console.log(channelId);\n  }, []);\n  useEffect(function () {\n    saveChatMessages();\n  }, [messages]);\n  useEffect(function () {\n    saveChannelState();\n  }, [isMember, showSettings]);\n  var isFormValid = inputText.nickname;\n  var buttons = [{\n    onPress: function onPress(_ref4) {\n      _objectDestructuringEmpty(_ref4);\n      return navigation.navigate('Profile');\n    },\n    text: 'Мой аккаунт'\n  }, {\n    onPress: function onPress() {\n      return logout();\n    },\n    text: 'Выйти'\n  }];\n  var handleJoinLeave = function () {\n    var _ref5 = _asyncToGenerator(function* () {\n      try {\n        var name = userText || user.name;\n        var channelName = channelData.name;\n        var apiUrl = isMember ? \"http://localhost:8080/api/channels/\" + channelId + \"/leave?username=\" + name : \"http://localhost:8080/api/channels/join?username=\" + name + \"&channel_name=\" + channelName;\n        var response = yield fetch(apiUrl, {\n          method: isMember ? 'DELETE' : 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': \"Basic \" + btoa(username + \":\" + password)\n          }\n        });\n        if (response.ok) {\n          setIsMember(function (prevIsMember) {\n            return !prevIsMember;\n          });\n          alert(isMember ? 'You left the channel' : 'You joined the channel');\n          window.location.reload();\n        } else {\n          alert(isMember ? 'Failed to leave the channel' : 'Failed to join the channel');\n        }\n      } catch (error) {\n        alert('Error joining/leaving the channel:', error);\n      }\n    });\n    return function handleJoinLeave() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  var saveChannelState = function () {\n    var _ref6 = _asyncToGenerator(function* () {\n      try {\n        var channelState = {\n          isMember: isMember,\n          showSettings: showSettings\n        };\n        yield AsyncStorage.setItem('channelState', JSON.stringify(channelState));\n      } catch (error) {\n        console.error('Error while saving channel state:', error);\n      }\n    });\n    return function saveChannelState() {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  var saveChatMessages = function () {\n    var _ref7 = _asyncToGenerator(function* () {\n      try {\n        yield AsyncStorage.setItem('chatMessages', JSON.stringify(messages));\n      } catch (error) {\n        console.error('Error while saving chat messages:', error);\n      }\n    });\n    return function saveChatMessages() {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n  var imageSource = selectedImage || user && user.image;\n  var loadChatMessages = function () {\n    var _ref8 = _asyncToGenerator(function* () {\n      try {\n        var savedMessages = yield AsyncStorage.getItem('chatMessages');\n        if (savedMessages) {\n          setMessages(JSON.parse(savedMessages));\n        }\n      } catch (error) {\n        console.error('Error while loading chat messages:', error);\n      }\n    });\n    return function loadChatMessages() {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n  var handleCreateChannel = function () {\n    var _ref9 = _asyncToGenerator(function* () {\n      try {\n        var response = yield fetch('http://localhost:8080/api/channels/create', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': \"Basic \" + btoa(username + \":\" + password)\n          },\n          body: JSON.stringify({\n            username: user.name,\n            channelName: inputText.nickname\n          })\n        });\n        if (response.ok) {\n          var channelResponse = yield response.json();\n          setShowPopup(false);\n          alert('Channel created');\n          window.location.reload();\n        } else {\n          alert('Failed to create channel');\n        }\n      } catch (error) {\n        alert('Error creating channel:', error);\n      }\n    });\n    return function handleCreateChannel() {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.containerMain,\n    children: [_jsxs(View, {\n      style: styles.barChanContainer,\n      children: [_jsx(Text, {\n        style: styles.barText,\n        children: channelData.name\n      }), _jsx(View, {\n        children: _jsx(HeaderButton, {\n          title: isMember ? 'Покинуть' : 'Присоединиться',\n          onPress: handleJoinLeave,\n          disabled: isDisable\n        })\n      }), isMember && isAdmin && _jsx(View, {\n        style: {\n          marginRight: 20\n        },\n        children: _jsx(TouchableHighlight, {\n          onPress: function onPress(_ref10) {\n            _objectDestructuringEmpty(_ref10);\n            return navigation.navigate('Settings', {\n              channelId: channelData.id\n            });\n          },\n          children: _jsx(SettingsSvg, {})\n        })\n      })]\n    }), _jsxs(View, {\n      style: styles.profileContainer,\n      children: [_jsx(ShowAvatar, {\n        imageUrl: imageSource,\n        profile: true\n      }), _jsx(Text, {\n        style: {\n          color: '#000000',\n          fontSize: 48,\n          textAlign: 'center',\n          marginBottom: 13,\n          fontFamily: 'Montserrat-Regular'\n        },\n        children: userText ? userText : user.name\n      }), buttons.map(function (data, index) {\n        return _jsx(View, {\n          style: {\n            width: '70%'\n          },\n          children: _jsx(BorderButton, {\n            data: data\n          }, index)\n        }, index);\n      })]\n    }), _jsx(View, {\n      style: styles.historyContainer,\n      children: _jsx(ScrollView, {\n        ref: scrollViewRef,\n        onContentSizeChange: handleContentSizeChange,\n        style: {\n          flex: 1,\n          scrollbarWidth: 0,\n          flexDirection: 'column'\n        },\n        children: channelData == null ? void 0 : (_channelData$messages2 = channelData.messages) == null ? void 0 : _channelData$messages2.map(function (message) {\n          var _message$sender, _matchingMember$role, _message$sender2, _message$sender3, _message$sender4;\n          var senderId = (_message$sender = message.sender) == null ? void 0 : _message$sender.id;\n          var matchingMember = channelData.members.find(function (member) {\n            return member.user.id === senderId;\n          });\n          var role = matchingMember == null ? void 0 : (_matchingMember$role = matchingMember.role) == null ? void 0 : _matchingMember$role.name;\n          return _jsx(MessageBody, {\n            data: {\n              imageUrl: (_message$sender2 = message.sender) == null ? void 0 : _message$sender2.image,\n              nickname: (_message$sender3 = message.sender) == null ? void 0 : _message$sender3.name,\n              role: role,\n              message: message.data,\n              date: message.date,\n              own: ((_message$sender4 = message.sender) == null ? void 0 : _message$sender4.name) === user.name,\n              channel: true,\n              unauth: false,\n              ident: message.id\n            },\n            currentUser: user\n          }, message.id);\n        })\n      })\n    }), isMember && _jsx(View, {\n      style: styles.sendContainer,\n      children: _jsx(MessageInput, {\n        channel: true,\n        curuser: userText ? userText : user.name,\n        chanInf: channelData\n      })\n    }), _jsx(View, {\n      style: styles.bottomLeft,\n      children: _jsx(TouchableHighlight, {\n        onPress: function onPress() {\n          return setShowPopup(true);\n        },\n        children: _jsx(CreateSvg, {})\n      })\n    }), _jsx(Modal, {\n      visible: showPopup,\n      transparent: true,\n      children: _jsxs(View, {\n        style: styles.popupContainer,\n        children: [_jsx(Text, {\n          style: styles.text,\n          children: \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u043A\\u0430\\u043D\\u0430\\u043B\\u0430\"\n        }), _jsx(View, {\n          style: {\n            marginBottom: 13,\n            alignItems: 'center'\n          },\n          children: _jsx(DataInput, {\n            value: inputText.nickname,\n            setValue: function setValue(text) {\n              return setInputText(_objectSpread(_objectSpread({}, inputText), {}, {\n                nickname: text\n              }));\n            },\n            placeholder: '',\n            type: 'nickname',\n            flex: true\n          })\n        }), _jsx(View, {\n          children: _jsx(HeaderButton, {\n            title: \"Создать\",\n            onPress: handleCreateChannel,\n            disabled: !isFormValid\n          })\n        })]\n      })\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","useContext","useEffect","useRef","View","Text","TouchableHighlight","Modal","TouchableOpacity","ScrollView","CreateSvg","useStyles","HeaderButton","ShowAvatar","BorderButton","MessageBody","MessageInput","SettingsSvg","ImageContext","AuthContext","AsyncStorage","DataInput","useFocusEffect","setProfileNickname","getProfileNickname","jsx","_jsx","jsxs","_jsxs","ChannelScreen","_ref","_channelData$messages2","navigation","route","styles","channelId","params","_useState","_useState2","_slicedToArray","showPopup","setShowPopup","_useState3","_useState4","role","setRole","_useState5","nickname","_useState6","inputText","setInputText","_useContext","logout","_useContext2","user","updateUser","_useState7","_useState8","messages","setMessages","_useContext3","selectedImage","_useState9","_useState10","isMember","setIsMember","_useState11","_useState12","isDisable","setIsDisable","_useState13","_useState14","isAdmin","setIsAdmin","_useState15","_useState16","showSettings","setShowSettings","_useState17","_useState18","userText","setUserText","username","password","_useState19","_useState20","channelData","setChannelData","_useState21","_useState22","shouldUseFocusEffect","setShouldUseFocusEffect","_useState23","_useState24","shouldFetchChannelData","setShouldFetchChannelData","fetchChannelData","then","catch","error","console","log","_ref2","_asyncToGenerator","response","fetch","method","headers","btoa","ok","json","Error","apply","arguments","useCallback","fetchProfileNickname","scrollViewRef","_useState25","_useState26","isAtBottom","setIsAtBottom","_channelData$messages","length","current","scrollToEnd","animated","handleContentSizeChange","isScrolledToBottom","contentOffset","y","layoutMeasurement","height","contentSize","_ref3","loadChatMessages","saveChatMessages","saveChannelState","isFormValid","buttons","onPress","_ref4","_objectDestructuringEmpty","navigate","text","handleJoinLeave","_ref5","name","channelName","apiUrl","prevIsMember","alert","window","location","reload","_ref6","channelState","setItem","JSON","stringify","_ref7","imageSource","image","_ref8","savedMessages","getItem","parse","handleCreateChannel","_ref9","body","channelResponse","style","containerMain","children","barChanContainer","barText","title","disabled","marginRight","_ref10","id","profileContainer","imageUrl","profile","color","fontSize","textAlign","marginBottom","fontFamily","map","data","index","width","historyContainer","ref","onContentSizeChange","flex","scrollbarWidth","flexDirection","message","_message$sender","_matchingMember$role","_message$sender2","_message$sender3","_message$sender4","senderId","sender","matchingMember","members","find","member","date","own","channel","unauth","ident","currentUser","sendContainer","curuser","chanInf","bottomLeft","visible","transparent","popupContainer","alignItems","value","setValue","_objectSpread","placeholder","type"],"sources":["C:/Users/ilias/OneDrive/Рабочий стол/messenger_project/Application/Client/screens/ChannelScreen.js"],"sourcesContent":["import React, { useState, useContext, useEffect, useRef } from 'react';\r\nimport { View, Text, TouchableHighlight, Modal, TouchableOpacity, ScrollView } from 'react-native';\r\nimport CreateSvg from '../assets/icons/createSvg';\r\nimport useStyles from './styles/mainAuthScreen.module';\r\nimport HeaderButton from '../components/buttons/headerButton';\r\nimport ShowAvatar from '../components/Avatar/ShowAvatar/showAvatar';\r\nimport BorderButton from '../components/buttons/borderButton';\r\nimport MessageBody from '../components/messageBody/messageBody';\r\nimport MessageInput from '../components/inputs/messageInput/messageInput';\r\nimport SettingsSvg from '../assets/icons/settingsSvg';\r\nimport { ImageContext } from '../context/ImageContext';\r\nimport AuthContext from '../context/AuthContext';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport DataInput from '../components/inputs/textInput/textInput';\r\nimport { useFocusEffect } from '@react-navigation/native';\r\nimport { setProfileNickname, getProfileNickname } from '../context/AsyncStorageUtil';\r\n\r\n\r\nexport default function ChannelScreen({ navigation, route }) {\r\n    const styles = useStyles();\r\n    const { channelId } = route.params;\r\n    const [showPopup, setShowPopup] = useState(false);\r\n    const [role, setRole] = useState('Admin');\r\n    const [inputText, setInputText] = useState({\r\n        nickname: '',\r\n    });\r\n    const { logout } = useContext(AuthContext);\r\n    const { user, updateUser } = useContext(AuthContext);\r\n    const [messages, setMessages] = useState([]);\r\n    const { selectedImage } = useContext(ImageContext);\r\n    const [isMember, setIsMember] = useState(false);\r\n    const [isDisable, setIsDisable] = useState(false);\r\n    const [isAdmin, setIsAdmin] = useState(false);\r\n    const [showSettings, setShowSettings] = useState(true);\r\n    const [userText, setUserText] = useState('');\r\n    const username = 'admin';\r\n    const password = 'root';\r\n    const [channelData, setChannelData] = useState([]);\r\n    const [shouldUseFocusEffect, setShouldUseFocusEffect] = useState(false);\r\n\r\n    const [shouldFetchChannelData, setShouldFetchChannelData] = useState(true);\r\n\r\nuseEffect(() => {\r\n  if (shouldFetchChannelData) {\r\n    fetchChannelData()\r\n      .then(() => setShouldFetchChannelData(false))\r\n      .catch((error) => console.log('Error fetching channel data:', error));\r\n  }\r\n}, [shouldFetchChannelData]);\r\n\r\nconst fetchChannelData = async () => {\r\n  try {\r\n    const response = await fetch(`http://localhost:8080/api/channels/${channelId}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Basic ${btoa(`${username}:${password}`)}`,\r\n      },\r\n    });\r\n\r\n    if (response.ok) {\r\n      const channelData = await response.json();\r\n\r\n      // Update channel data and handle roles/membership\r\n      // ...\r\n\r\n      setChannelData(channelData);\r\n    } else {\r\n      throw new Error('Failed to fetch channel data');\r\n    }\r\n  } catch (error) {\r\n    throw new Error('Error fetching channel data:', error);\r\n  }\r\n};\r\n\r\nuseFocusEffect(\r\n  React.useCallback(() => {\r\n    fetchProfileNickname();\r\n    setShouldFetchChannelData(true); // Trigger fetching when the component is focused\r\n  }, [])\r\n);\r\n\r\nuseEffect(() => {\r\n  setShouldFetchChannelData(true); // Trigger fetching when channelData.messages change\r\n}, [channelData.messages]);\r\n\r\n\r\n    const scrollViewRef = useRef(null);\r\n    const [isAtBottom, setIsAtBottom] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (channelData?.messages?.length > 0 && isAtBottom) {\r\n            scrollViewRef.current.scrollToEnd({ animated: true });\r\n        }\r\n    }, [channelData?.messages, isAtBottom]);\r\n\r\n    const handleContentSizeChange = () => {\r\n        const isScrolledToBottom =\r\n            scrollViewRef.current &&\r\n            scrollViewRef.current.contentOffset &&\r\n            scrollViewRef.current.contentOffset.y + scrollViewRef.current.layoutMeasurement.height >=\r\n            scrollViewRef.current.contentSize.height;\r\n\r\n        setIsAtBottom(isScrolledToBottom);\r\n    };\r\n\r\n    const fetchProfileNickname = async () => {\r\n        try {\r\n            const nickname = await getProfileNickname();\r\n            if (nickname && nickname !== userText) {\r\n                setUserText(nickname);\r\n            }\r\n        } catch (error) {\r\n            console.log('Error retrieving profile nickname:', error);\r\n        }\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        loadChatMessages();\r\n        console.log(channelId);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        saveChatMessages();\r\n    }, [messages]);\r\n\r\n    useEffect(() => {\r\n        saveChannelState();\r\n    }, [isMember, showSettings]);\r\n\r\n\r\n\r\n    const isFormValid = inputText.nickname;\r\n    const buttons = [\r\n        {\r\n            onPress: ({ }) => navigation.navigate('Profile'),\r\n            text: 'Мой аккаунт',\r\n        },\r\n        {\r\n            onPress: () => logout(),\r\n            text: 'Выйти',\r\n        },\r\n    ];\r\n\r\n\r\n\r\n    const handleJoinLeave = async () => {\r\n        try {\r\n            const name = userText || user.name;\r\n            const channelName = channelData.name;\r\n            const apiUrl = isMember\r\n                ? `http://localhost:8080/api/channels/${channelId}/leave?username=${name}`\r\n                : `http://localhost:8080/api/channels/join?username=${name}&channel_name=${channelName}`;\r\n\r\n            const response = await fetch(apiUrl, {\r\n                method: isMember ? 'DELETE' : 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Basic ${btoa(`${username}:${password}`)}`,\r\n                },\r\n            });\r\n\r\n            if (response.ok) {\r\n                setIsMember((prevIsMember) => !prevIsMember);\r\n                alert(isMember ? 'You left the channel' : 'You joined the channel');\r\n                window.location.reload();\r\n            } else {\r\n                // Handle error response\r\n                alert(isMember ? 'Failed to leave the channel' : 'Failed to join the channel');\r\n            }\r\n        } catch (error) {\r\n            alert('Error joining/leaving the channel:', error);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    const saveChannelState = async () => {\r\n        try {\r\n            const channelState = {\r\n                isMember,\r\n                showSettings,\r\n            };\r\n            await AsyncStorage.setItem('channelState', JSON.stringify(channelState));\r\n        } catch (error) {\r\n            console.error('Error while saving channel state:', error);\r\n        }\r\n    };\r\n\r\n\r\n    const saveChatMessages = async () => {\r\n        try {\r\n            await AsyncStorage.setItem('chatMessages', JSON.stringify(messages));\r\n        } catch (error) {\r\n            console.error('Error while saving chat messages:', error);\r\n        }\r\n    };\r\n    const imageSource = selectedImage || (user && user.image);\r\n    const loadChatMessages = async () => {\r\n        try {\r\n            const savedMessages = await AsyncStorage.getItem('chatMessages');\r\n            if (savedMessages) {\r\n                setMessages(JSON.parse(savedMessages));\r\n            }\r\n        } catch (error) {\r\n            console.error('Error while loading chat messages:', error);\r\n        }\r\n    };\r\n    const handleCreateChannel = async () => {\r\n        try {\r\n          const response = await fetch('http://localhost:8080/api/channels/create', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Basic ${btoa(`${username}:${password}`)}`,\r\n            },\r\n            body: JSON.stringify({\r\n              username: user.name,\r\n              channelName: inputText.nickname,\r\n            }),\r\n          });\r\n    \r\n          if (response.ok) {\r\n            const channelResponse = await response.json();\r\n            setShowPopup(false);\r\n            // Channel creation successful\r\n            alert('Channel created');\r\n            window.location.reload();\r\n          } else {\r\n            // Handle error response\r\n            alert('Failed to create channel');\r\n          }\r\n        } catch (error) {\r\n          alert('Error creating channel:', error);\r\n        }\r\n      };\r\n\r\n\r\n    return (\r\n        <View style={styles.containerMain}>\r\n            <View style={styles.barChanContainer}>\r\n                <Text style={styles.barText}>{channelData.name}</Text>\r\n                <View>\r\n                    <HeaderButton title={isMember ? 'Покинуть' : 'Присоединиться'} onPress={handleJoinLeave} disabled={isDisable} />\r\n                </View>\r\n                {isMember && isAdmin && (\r\n                    <View style={{ marginRight: 20 }}>\r\n                        <TouchableHighlight onPress={({ }) => navigation.navigate('Settings', { channelId: channelData.id })}>\r\n                            <SettingsSvg />\r\n                        </TouchableHighlight>\r\n                    </View>\r\n                )}\r\n            </View>\r\n            <View style={styles.profileContainer}>\r\n                <ShowAvatar imageUrl={imageSource} profile={true} />\r\n                <Text style={{ color: '#000000', fontSize: 48, textAlign: 'center', marginBottom: 13, fontFamily: 'Montserrat-Regular', }}>{userText ? userText : user.name}</Text>\r\n                {buttons.map((data, index) => (\r\n                    <View style={{ width: '70%' }} key={index}>\r\n                        <BorderButton key={index} data={data} />\r\n                    </View>\r\n                ))}\r\n            </View>\r\n            <View style={styles.historyContainer}>\r\n                <ScrollView ref={scrollViewRef} onContentSizeChange={handleContentSizeChange}\r\n                    style={{ flex: 1, scrollbarWidth: 0, flexDirection: 'column' }}>\r\n                    {channelData?.messages?.map((message) => {\r\n                        const senderId = message.sender?.id;\r\n                        const matchingMember = channelData.members.find((member) => member.user.id === senderId);\r\n\r\n                        const role = matchingMember?.role?.name;\r\n\r\n                        return (\r\n                            <MessageBody\r\n                                key={message.id}\r\n                                data={{\r\n                                    imageUrl: message.sender?.image,\r\n                                    nickname: message.sender?.name,\r\n                                    role: role,\r\n                                    message: message.data,\r\n                                    date: message.date,\r\n                                    own: message.sender?.name === user.name,\r\n                                    channel: true,\r\n                                    unauth: false,\r\n                                    ident: message.id\r\n                                }}\r\n                                currentUser={user}\r\n                            />\r\n                        );\r\n                    })}\r\n\r\n                </ScrollView>\r\n            </View>\r\n            {isMember && (\r\n                <View style={styles.sendContainer}>\r\n                    <MessageInput channel = {true} curuser={userText ? userText : user.name} chanInf={channelData} />\r\n                </View>\r\n            )}\r\n            <View style={styles.bottomLeft}>\r\n                <TouchableHighlight onPress={() => setShowPopup(true)}>\r\n                    <CreateSvg />\r\n                </TouchableHighlight>\r\n            </View>\r\n            <Modal visible={showPopup} transparent={true}>\r\n                <View style={styles.popupContainer}>\r\n                    <Text style={styles.text}>Название канала</Text>\r\n                    <View style={{ marginBottom: 13, alignItems: 'center' }}>\r\n                        <DataInput\r\n                            value={inputText.nickname}\r\n                            setValue={(text) => setInputText({ ...inputText, nickname: text })}\r\n                            placeholder={''}\r\n                            type={'nickname'}\r\n                            flex={true}\r\n                        />\r\n                    </View>\r\n                    <View>\r\n                        <HeaderButton title={\"Создать\"} onPress={handleCreateChannel} disabled={!isFormValid} />\r\n                    </View>\r\n                </View>\r\n            </Modal>\r\n        </View>\r\n    );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}