{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useEffect, useState } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var MessageContext = createContext();\nexport var MessageProvider = function MessageProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    forwardedMessages = _useState2[0],\n    setForwardedMessages = _useState2[1];\n  useEffect(function () {\n    var storedMessages = localStorage.getItem('forwardedMessages');\n    if (storedMessages) {\n      setForwardedMessages(JSON.parse(storedMessages));\n    }\n  }, []);\n  useEffect(function () {\n    localStorage.setItem('forwardedMessages', JSON.stringify(forwardedMessages));\n  }, [forwardedMessages]);\n  var addForwardedMessage = function addForwardedMessage(message) {\n    setForwardedMessages(function (prevMessages) {\n      return [].concat(_toConsumableArray(prevMessages), [message]);\n    });\n  };\n  return _jsx(MessageContext.Provider, {\n    value: {\n      forwardedMessages: forwardedMessages,\n      addForwardedMessage: addForwardedMessage\n    },\n    children: children\n  });\n};","map":{"version":3,"names":["React","createContext","useEffect","useState","jsx","_jsx","MessageContext","MessageProvider","_ref","children","_useState","_useState2","_slicedToArray","forwardedMessages","setForwardedMessages","storedMessages","localStorage","getItem","JSON","parse","setItem","stringify","addForwardedMessage","message","prevMessages","concat","_toConsumableArray","Provider","value"],"sources":["C:/Users/ilias/OneDrive/Рабочий стол/messenger_project/Application/Client/context/MessageContext.js"],"sourcesContent":["import React, { createContext, useEffect, useState } from 'react';\r\n\r\nexport const MessageContext = createContext();\r\n\r\nexport const MessageProvider = ({ children }) => {\r\n  const [forwardedMessages, setForwardedMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Load forwarded messages from localStorage on component mount\r\n    const storedMessages = localStorage.getItem('forwardedMessages');\r\n    if (storedMessages) {\r\n      setForwardedMessages(JSON.parse(storedMessages));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Save forwarded messages to localStorage whenever it changes\r\n    localStorage.setItem('forwardedMessages', JSON.stringify(forwardedMessages));\r\n  }, [forwardedMessages]);\r\n\r\n  const addForwardedMessage = (message) => {\r\n    setForwardedMessages((prevMessages) => [...prevMessages, message]);\r\n  };\r\n\r\n  return (\r\n    <MessageContext.Provider value={{ forwardedMessages, addForwardedMessage }}>\r\n      {children}\r\n    </MessageContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAElE,OAAO,IAAMC,cAAc,GAAGL,aAAa,CAAC,CAAC;AAE7C,OAAO,IAAMM,eAAe,GAAG,SAAlBA,eAAeA,CAAAC,IAAA,EAAqB;EAAA,IAAfC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;EACxC,IAAAC,SAAA,GAAkDP,QAAQ,CAAC,EAAE,CAAC;IAAAQ,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAvDG,iBAAiB,GAAAF,UAAA;IAAEG,oBAAoB,GAAAH,UAAA;EAE9CT,SAAS,CAAC,YAAM;IAEd,IAAMa,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,mBAAmB,CAAC;IAChE,IAAIF,cAAc,EAAE;MAClBD,oBAAoB,CAACI,IAAI,CAACC,KAAK,CAACJ,cAAc,CAAC,CAAC;IAClD;EACF,CAAC,EAAE,EAAE,CAAC;EAENb,SAAS,CAAC,YAAM;IAEdc,YAAY,CAACI,OAAO,CAAC,mBAAmB,EAAEF,IAAI,CAACG,SAAS,CAACR,iBAAiB,CAAC,CAAC;EAC9E,CAAC,EAAE,CAACA,iBAAiB,CAAC,CAAC;EAEvB,IAAMS,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAIC,OAAO,EAAK;IACvCT,oBAAoB,CAAC,UAACU,YAAY;MAAA,UAAAC,MAAA,CAAAC,kBAAA,CAASF,YAAY,IAAED,OAAO;IAAA,CAAC,CAAC;EACpE,CAAC;EAED,OACElB,IAAA,CAACC,cAAc,CAACqB,QAAQ;IAACC,KAAK,EAAE;MAAEf,iBAAiB,EAAjBA,iBAAiB;MAAES,mBAAmB,EAAnBA;IAAoB,CAAE;IAAAb,QAAA,EACxEA;EAAQ,CACc,CAAC;AAE9B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}